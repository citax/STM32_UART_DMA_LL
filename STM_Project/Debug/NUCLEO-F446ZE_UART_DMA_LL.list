
NUCLEO-F446ZE_UART_DMA_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003950  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b3c  08003b3c  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b44  08003b44  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000030  08003b7c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08003b7c  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3e3  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000233e  00000000  00000000  0002c486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0002e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a40  00000000  00000000  0002f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023dde  00000000  00000000  0002ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d03c  00000000  00000000  00053db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d74da  00000000  00000000  00060df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039b4  00000000  00000000  001382cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000030 	.word	0x20000030
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003afc 	.word	0x08003afc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000034 	.word	0x20000034
 8000200:	08003afc 	.word	0x08003afc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	db0b      	blt.n	800052a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 021f 	and.w	r2, r3, #31
 8000518:	4907      	ldr	r1, [pc, #28]	; (8000538 <__NVIC_EnableIRQ+0x38>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	2001      	movs	r0, #1
 8000522:	fa00 f202 	lsl.w	r2, r0, r2
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000e100 	.word	0xe000e100

0800053c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db0a      	blt.n	8000566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	490c      	ldr	r1, [pc, #48]	; (8000588 <__NVIC_SetPriority+0x4c>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	0112      	lsls	r2, r2, #4
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	440b      	add	r3, r1
 8000560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000564:	e00a      	b.n	800057c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4908      	ldr	r1, [pc, #32]	; (800058c <__NVIC_SetPriority+0x50>)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 030f 	and.w	r3, r3, #15
 8000572:	3b04      	subs	r3, #4
 8000574:	0112      	lsls	r2, r2, #4
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	440b      	add	r3, r1
 800057a:	761a      	strb	r2, [r3, #24]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000e100 	.word	0xe000e100
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800059a:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <LL_DMA_EnableStream+0x3c>)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4908      	ldr	r1, [pc, #32]	; (80005cc <LL_DMA_EnableStream+0x3c>)
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	440a      	add	r2, r1
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	4611      	mov	r1, r2
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	440a      	add	r2, r1
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6013      	str	r3, [r2, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	08003b14 	.word	0x08003b14

080005d0 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  *@retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Configuration)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <LL_DMA_ConfigTransfer+0x48>)
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 335f 	bic.w	r3, r3, #228352	; 0x37c00
 80005f0:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 80005f4:	4908      	ldr	r1, [pc, #32]	; (8000618 <LL_DMA_ConfigTransfer+0x48>)
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	440a      	add	r2, r1
 80005fa:	7812      	ldrb	r2, [r2, #0]
 80005fc:	4611      	mov	r1, r2
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	440a      	add	r2, r1
 8000602:	4611      	mov	r1, r2
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4313      	orrs	r3, r2
 8000608:	600b      	str	r3, [r1, #0]
             DMA_SxCR_DIR | DMA_SxCR_CIRC | DMA_SxCR_PINC | DMA_SxCR_MINC | DMA_SxCR_PSIZE | DMA_SxCR_MSIZE | DMA_SxCR_PL | DMA_SxCR_PFCTRL,
             Configuration);
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	08003b14 	.word	0x08003b14

0800061c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LL_DMA_SetDataLength+0x44>)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	4413      	add	r3, r2
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	0c1b      	lsrs	r3, r3, #16
 800063a:	041b      	lsls	r3, r3, #16
 800063c:	4908      	ldr	r1, [pc, #32]	; (8000660 <LL_DMA_SetDataLength+0x44>)
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	440a      	add	r2, r1
 8000642:	7812      	ldrb	r2, [r2, #0]
 8000644:	4611      	mov	r1, r2
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	440a      	add	r2, r1
 800064a:	4611      	mov	r1, r2
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	604b      	str	r3, [r1, #4]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	08003b14 	.word	0x08003b14

08000664 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef* DMAx, uint32_t Stream)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <LL_DMA_GetDataLength+0x28>)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	b29b      	uxth	r3, r3
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	08003b14 	.word	0x08003b14

08000690 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	2b40      	cmp	r3, #64	; 0x40
 80006a2:	d114      	bne.n	80006ce <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <LL_DMA_ConfigAddresses+0x74>)
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4413      	add	r3, r2
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <LL_DMA_ConfigAddresses+0x74>)
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	461a      	mov	r2, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 80006cc:	e013      	b.n	80006f6 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80006ce:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <LL_DMA_ConfigAddresses+0x74>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <LL_DMA_ConfigAddresses+0x74>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	60d3      	str	r3, [r2, #12]
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	08003b14 	.word	0x08003b14

08000708 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll HISR  TCIF0    LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800071c:	bf0c      	ite	eq
 800071e:	2301      	moveq	r3, #1
 8000720:	2300      	movne	r3, #0
 8000722:	b2db      	uxtb	r3, r3
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll HISR  TCIF6    LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000744:	bf0c      	ite	eq
 8000746:	2301      	moveq	r3, #1
 8000748:	2300      	movne	r3, #0
 800074a:	b2db      	uxtb	r3, r3
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <LL_DMA_IsActiveFlag_TE5>:
  * @rmtoll HISR  TEIF0    LL_DMA_IsActiveFlag_TE5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF5)==(DMA_HISR_TEIF5));
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800076c:	bf0c      	ite	eq
 800076e:	2301      	moveq	r3, #1
 8000770:	2300      	movne	r3, #0
 8000772:	b2db      	uxtb	r3, r3
}
 8000774:	4618      	mov	r0, r3
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <LL_DMA_IsActiveFlag_TE6>:
  * @rmtoll HISR  TEIF6    LL_DMA_IsActiveFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF6)==(DMA_HISR_TEIF6));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000790:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000794:	bf0c      	ite	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	2300      	movne	r3, #0
 800079a:	b2db      	uxtb	r3, r3
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007b6:	60da      	str	r2, [r3, #12]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007d2:	60da      	str	r2, [r3, #12]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <LL_DMA_ClearFlag_TE5>:
  * @rmtoll HIFCR  CTEIF5    LL_DMA_ClearFlag_TE5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF5);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ee:	60da      	str	r2, [r3, #12]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_DMA_ClearFlag_TE6>:
  * @rmtoll HIFCR  CTEIF6    LL_DMA_ClearFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800080a:	60da      	str	r2, [r3, #12]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 8000822:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <LL_DMA_EnableIT_TE+0x3c>)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4908      	ldr	r1, [pc, #32]	; (8000854 <LL_DMA_EnableIT_TE+0x3c>)
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	440a      	add	r2, r1
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	4611      	mov	r1, r2
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	440a      	add	r2, r1
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6013      	str	r3, [r2, #0]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	08003b14 	.word	0x08003b14

08000858 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <LL_DMA_EnableIT_TC+0x3c>)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4908      	ldr	r1, [pc, #32]	; (8000894 <LL_DMA_EnableIT_TC+0x3c>)
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	440a      	add	r2, r1
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	4611      	mov	r1, r2
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	440a      	add	r2, r1
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	08003b14 	.word	0x08003b14

08000898 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 80008a2:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <LL_DMA_DisableIT_HT+0x3c>)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <LL_DMA_DisableIT_HT+0x3c>)
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	440a      	add	r2, r1
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	4611      	mov	r1, r2
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	440a      	add	r2, r1
 80008c0:	f023 0308 	bic.w	r3, r3, #8
 80008c4:	6013      	str	r3, [r2, #0]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	08003b14 	.word	0x08003b14

080008d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e4:	4907      	ldr	r1, [pc, #28]	; (8000904 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4013      	ands	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	40023800 	.word	0x40023800

08000908 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0310 	and.w	r3, r3, #16
 8000918:	2b10      	cmp	r3, #16
 800091a:	bf0c      	ite	eq
 800091c:	2301      	moveq	r3, #1
 800091e:	2300      	movne	r3, #0
 8000920:	b2db      	uxtb	r3, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800093c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000944:	68fb      	ldr	r3, [r7, #12]
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000952:	b480      	push	{r7}
 8000954:	b089      	sub	sp, #36	; 0x24
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	330c      	adds	r3, #12
 800095e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	e853 3f00 	ldrex	r3, [r3]
 8000966:	60bb      	str	r3, [r7, #8]
   return(result);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	330c      	adds	r3, #12
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	61ba      	str	r2, [r7, #24]
 8000978:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800097a:	6979      	ldr	r1, [r7, #20]
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	e841 2300 	strex	r3, r2, [r1]
 8000982:	613b      	str	r3, [r7, #16]
   return(result);
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1e7      	bne.n	800095a <LL_USART_EnableIT_IDLE+0x8>
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3724      	adds	r7, #36	; 0x24
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3314      	adds	r3, #20
 80009a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	e853 3f00 	ldrex	r3, [r3]
 80009ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	61fb      	str	r3, [r7, #28]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3314      	adds	r3, #20
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	61ba      	str	r2, [r7, #24]
 80009be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80009c0:	6979      	ldr	r1, [r7, #20]
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	e841 2300 	strex	r3, r2, [r1]
 80009c8:	613b      	str	r3, [r7, #16]
   return(result);
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1e7      	bne.n	80009a0 <LL_USART_EnableDMAReq_RX+0x8>
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80009de:	b480      	push	{r7}
 80009e0:	b089      	sub	sp, #36	; 0x24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3314      	adds	r3, #20
 80009ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	e853 3f00 	ldrex	r3, [r3]
 80009f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fa:	61fb      	str	r3, [r7, #28]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3314      	adds	r3, #20
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	61ba      	str	r2, [r7, #24]
 8000a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a06:	6979      	ldr	r1, [r7, #20]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	e841 2300 	strex	r3, r2, [r1]
 8000a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1e7      	bne.n	80009e6 <LL_USART_EnableDMAReq_TX+0x8>
}
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	3724      	adds	r7, #36	; 0x24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <LL_UART_DMA_RX_Config>:
 * @Function_Brief  : Config function for LL Uart Rx. Use this function in the
 * 					  MX_USART2_UART_Init() or use after UART and DMA Init func.
 ******************************************************************************/

void LL_UART_DMA_RX_Config(USART_TypeDef *USARTx ,DMA_TypeDef *DMAx, uint32_t Periphs ,
		uint32_t Stream, IRQn_Type IRQn, uint8_t DstAddress[], uint8_t Rx_Buffer_Size) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]

	// Enable DMA Clock.
	LL_AHB1_GRP1_EnableClock(Periphs);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ff44 	bl	80008d8 <LL_AHB1_GRP1_EnableClock>

	/*ENABLE DMA NVIC PRIOTIRY*/
	NVIC_SetPriority(IRQn, 0);
 8000a50:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd70 	bl	800053c <__NVIC_SetPriority>

	/*ENABLE DMA NVIC IRQN*/
	NVIC_EnableIRQ(IRQn);
 8000a5c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fd4d 	bl	8000500 <__NVIC_EnableIRQ>

	/*CONFIGURE DMA TRANSFER*/
	LL_DMA_ConfigTransfer(	 DMAx, Stream,
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <LL_UART_DMA_RX_Config+0x80>)
 8000a68:	6839      	ldr	r1, [r7, #0]
 8000a6a:	68b8      	ldr	r0, [r7, #8]
 8000a6c:	f7ff fdb0 	bl	80005d0 <LL_DMA_ConfigTransfer>
	  						 LL_DMA_MEMORY_INCREMENT			|
	  						 LL_DMA_PDATAALIGN_BYTE				|
	  						 LL_DMA_MDATAALIGN_BYTE				);

	/*Configure transfer address and direction*/
	LL_DMA_ConfigAddresses(	 DMAx,
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff ffd7 	bl	8000a24 <LL_USART_DMA_GetRegAddr>
 8000a76:	4602      	mov	r2, r0
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	9100      	str	r1, [sp, #0]
 8000a7e:	6839      	ldr	r1, [r7, #0]
 8000a80:	68b8      	ldr	r0, [r7, #8]
 8000a82:	f7ff fe05 	bl	8000690 <LL_DMA_ConfigAddresses>
							 LL_USART_DMA_GetRegAddr(USARTx),
	  		  	  	  	  	 (uint32_t)DstAddress,
							 LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	/* Set data lenght */
	LL_DMA_SetDataLength(DMAx, Stream, Rx_Buffer_Size);
 8000a86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	6839      	ldr	r1, [r7, #0]
 8000a8e:	68b8      	ldr	r0, [r7, #8]
 8000a90:	f7ff fdc4 	bl	800061c <LL_DMA_SetDataLength>

	/* Enable DMA Complate, IDLE and Error Interrupt. */
	LL_DMA_EnableIT_TC(DMAx, Stream);
 8000a94:	6839      	ldr	r1, [r7, #0]
 8000a96:	68b8      	ldr	r0, [r7, #8]
 8000a98:	f7ff fede 	bl	8000858 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMAx, Stream);
 8000a9c:	6839      	ldr	r1, [r7, #0]
 8000a9e:	68b8      	ldr	r0, [r7, #8]
 8000aa0:	f7ff feba 	bl	8000818 <LL_DMA_EnableIT_TE>
	/* Disable Half Transfer Complate Interrupt*/
	LL_DMA_DisableIT_HT(DMAx, Stream);
 8000aa4:	6839      	ldr	r1, [r7, #0]
 8000aa6:	68b8      	ldr	r0, [r7, #8]
 8000aa8:	f7ff fef6 	bl	8000898 <LL_DMA_DisableIT_HT>

	/* Enable to UART IDLE*/
	LL_USART_EnableIT_IDLE(USARTx);
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f7ff ff50 	bl	8000952 <LL_USART_EnableIT_IDLE>
}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	00020500 	.word	0x00020500

08000ac0 <LL_UART_DMA_TX_Config>:
 * @Function_Brief  : Config function for LL Uart Tx. Use this function in the
 * 					  MX_USART2_UART_Init() or use after UART and DMA Init func.
 ******************************************************************************/

void LL_UART_DMA_TX_Config(USART_TypeDef *USARTx ,DMA_TypeDef *DMAx, uint32_t Periphs ,
		uint32_t Stream, IRQn_Type IRQn, uint8_t SourceAddress[], uint8_t Tx_Buffer_Size) {
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	603b      	str	r3, [r7, #0]


	  LL_AHB1_GRP1_EnableClock(Periphs);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff02 	bl	80008d8 <LL_AHB1_GRP1_EnableClock>

	  /*ENABLE DMA NVIC PRIOTIRY*/

	  NVIC_SetPriority(IRQn, 0);
 8000ad4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fd2e 	bl	800053c <__NVIC_SetPriority>

	  /*ENABLE DMA NVIC IRQN*/

	  NVIC_EnableIRQ(IRQn);
 8000ae0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd0b 	bl	8000500 <__NVIC_EnableIRQ>

	  /*CONFIGURE DMA TRANSFER*/
	  LL_DMA_ConfigTransfer(DMAx, Stream,
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <LL_UART_DMA_TX_Config+0x7c>)
 8000aec:	6839      	ldr	r1, [r7, #0]
 8000aee:	68b8      	ldr	r0, [r7, #8]
 8000af0:	f7ff fd6e 	bl	80005d0 <LL_DMA_ConfigTransfer>
							 LL_DMA_PDATAALIGN_BYTE				|
							 LL_DMA_MDATAALIGN_BYTE				);

	  /*Configure transfer address and direction*/

	  LL_DMA_ConfigAddresses(DMAx,
 8000af4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff ff94 	bl	8000a24 <LL_USART_DMA_GetRegAddr>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2240      	movs	r2, #64	; 0x40
 8000b00:	9200      	str	r2, [sp, #0]
 8000b02:	4622      	mov	r2, r4
 8000b04:	6839      	ldr	r1, [r7, #0]
 8000b06:	68b8      	ldr	r0, [r7, #8]
 8000b08:	f7ff fdc2 	bl	8000690 <LL_DMA_ConfigAddresses>
							 LL_USART_DMA_GetRegAddr(USARTx) ,
							 LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	  /* Set data lenght */

	  LL_DMA_SetDataLength(DMAx, Stream, Tx_Buffer_Size);
 8000b0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b10:	461a      	mov	r2, r3
 8000b12:	6839      	ldr	r1, [r7, #0]
 8000b14:	68b8      	ldr	r0, [r7, #8]
 8000b16:	f7ff fd81 	bl	800061c <LL_DMA_SetDataLength>


	  LL_DMA_EnableIT_TC(DMAx, Stream);
 8000b1a:	6839      	ldr	r1, [r7, #0]
 8000b1c:	68b8      	ldr	r0, [r7, #8]
 8000b1e:	f7ff fe9b 	bl	8000858 <LL_DMA_EnableIT_TC>
	  LL_DMA_EnableIT_TE(DMAx, Stream);
 8000b22:	6839      	ldr	r1, [r7, #0]
 8000b24:	68b8      	ldr	r0, [r7, #8]
 8000b26:	f7ff fe77 	bl	8000818 <LL_DMA_EnableIT_TE>
	  LL_DMA_DisableIT_HT(DMAx, Stream);
 8000b2a:	6839      	ldr	r1, [r7, #0]
 8000b2c:	68b8      	ldr	r0, [r7, #8]
 8000b2e:	f7ff feb3 	bl	8000898 <LL_DMA_DisableIT_HT>

}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	00020440 	.word	0x00020440

08000b40 <LL_UART_DMA_RX_Start>:
 * @Function_Input  : USARTx, DMAx, Stream
 * @Function_Output : None
 * @Function_Brief  : Start func. Uart Rx LL
 ******************************************************************************/

void LL_UART_DMA_RX_Start(USART_TypeDef *USARTx, DMA_TypeDef *DMAx, uint32_t Stream){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]

	LL_USART_EnableDMAReq_RX(USARTx);
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff ff23 	bl	8000998 <LL_USART_EnableDMAReq_RX>
	LL_DMA_EnableStream(DMAx, Stream);
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	68b8      	ldr	r0, [r7, #8]
 8000b56:	f7ff fd1b 	bl	8000590 <LL_DMA_EnableStream>

}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <LL_UART_DMA_TX_Start>:
 * @Function_Input  : USARTx, DMAx, Stream
 * @Function_Output : None
 * @Function_Brief  : Start func. Uart Rx LL
 ******************************************************************************/

void LL_UART_DMA_TX_Start(USART_TypeDef *USARTx, DMA_TypeDef *DMAx, uint32_t Stream){
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b084      	sub	sp, #16
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]

	LL_USART_EnableDMAReq_TX(USARTx);
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff ff35 	bl	80009de <LL_USART_EnableDMAReq_TX>
	LL_DMA_EnableStream(DMAx, Stream);
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	68b8      	ldr	r0, [r7, #8]
 8000b78:	f7ff fd0a 	bl	8000590 <LL_DMA_EnableStream>

}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <LL_UART_DMA_RX_Interrupt>:
 * @Function_Input  : DMAx
 * @Function_Output : None
 * @Function_Brief  : DMA RX Interrupt func.
 ******************************************************************************/

void LL_UART_DMA_RX_Interrupt(DMA_TypeDef *DMAx){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

	if(LL_DMA_IsActiveFlag_TC5(DMAx)){ // User should change LL_DMA_IsActiveFlag_TCx with the correct stream.
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fdbb 	bl	8000708 <LL_DMA_IsActiveFlag_TC5>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <LL_UART_DMA_RX_Interrupt+0x22>

			LL_DMA_ClearFlag_TC5(DMAx);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fe05 	bl	80007a8 <LL_DMA_ClearFlag_TC5>

			Rx_Cmplt = 1;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <LL_UART_DMA_RX_Interrupt+0x44>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]

			LL_DMA_ClearFlag_TE5(DMAx);
			Rx_Error = 1;
	}

}
 8000ba4:	e00b      	b.n	8000bbe <LL_UART_DMA_RX_Interrupt+0x3a>
	else if(LL_DMA_IsActiveFlag_TE5(DMAx)){ // User should change LL_DMA_IsActiveFlag_TEx with the correct stream.
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fdd6 	bl	8000758 <LL_DMA_IsActiveFlag_TE5>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d005      	beq.n	8000bbe <LL_UART_DMA_RX_Interrupt+0x3a>
			LL_DMA_ClearFlag_TE5(DMAx);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fe14 	bl	80007e0 <LL_DMA_ClearFlag_TE5>
			Rx_Error = 1;
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <LL_UART_DMA_RX_Interrupt+0x48>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000057 	.word	0x20000057
 8000bcc:	20000056 	.word	0x20000056

08000bd0 <LL_UART_DMA_TX_Interrupt>:
 * @Function_Input  : DMAx
 * @Function_Output : None
 * @Function_Brief  : DMA TX Interrupt func.
 ******************************************************************************/

void LL_UART_DMA_TX_Interrupt(DMA_TypeDef *DMAx){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

	if(LL_DMA_IsActiveFlag_TC6(DMAx)){ // The user should change LL_DMA_IsActiveFlag_TCx with the correct stream.
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fda9 	bl	8000730 <LL_DMA_IsActiveFlag_TC6>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <LL_UART_DMA_TX_Interrupt+0x22>

		LL_DMA_ClearFlag_TC6(DMAx);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fded 	bl	80007c4 <LL_DMA_ClearFlag_TC6>

		Tx_Cmplt = 1;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <LL_UART_DMA_TX_Interrupt+0x44>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
		LL_DMA_ClearFlag_TE6(DMAx);

		Tx_Error = 1;
	}

}
 8000bf0:	e00b      	b.n	8000c0a <LL_UART_DMA_TX_Interrupt+0x3a>
	else if(LL_DMA_IsActiveFlag_TE6(DMAx)){ // User should change LL_DMA_IsActiveFlag_TEx with the correct stream.
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fdc4 	bl	8000780 <LL_DMA_IsActiveFlag_TE6>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d005      	beq.n	8000c0a <LL_UART_DMA_TX_Interrupt+0x3a>
		LL_DMA_ClearFlag_TE6(DMAx);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fdfc 	bl	80007fc <LL_DMA_ClearFlag_TE6>
		Tx_Error = 1;
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <LL_UART_DMA_TX_Interrupt+0x48>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000548 	.word	0x20000548
 8000c18:	20000549 	.word	0x20000549

08000c1c <LL_UART_DMA_RX_IDLE_Interrupt>:
 * @Function_Output : None
 * @Function_Brief  : IDLE Interrupt func.
 ******************************************************************************/

void LL_UART_DMA_RX_IDLE_Interrupt(USART_TypeDef *USARTx, DMA_TypeDef *DMAx, uint32_t Stream,
		uint8_t Recieved_Data[], uint8_t Rx_Buffer[]){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	603b      	str	r3, [r7, #0]

	if(LL_USART_IsActiveFlag_IDLE(USARTx))
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fe6c 	bl	8000908 <LL_USART_IsActiveFlag_IDLE>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 808b 	beq.w	8000d4e <LL_UART_DMA_RX_IDLE_Interrupt+0x132>
	{

		for(uint8_t i=0; i<Rx_Buffer_Size; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	75fb      	strb	r3, [r7, #23]
 8000c3c:	e007      	b.n	8000c4e <LL_UART_DMA_RX_IDLE_Interrupt+0x32>
			Recieved_Data[i] = 0;	// Reset to Recieved_Data
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<Rx_Buffer_Size; i++) {
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	75fb      	strb	r3, [r7, #23]
 8000c4e:	7dfb      	ldrb	r3, [r7, #23]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d9f4      	bls.n	8000c3e <LL_UART_DMA_RX_IDLE_Interrupt+0x22>
		}

		LL_USART_ClearFlag_IDLE(USARTx); // Clear flag
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f7ff fe6a 	bl	800092e <LL_USART_ClearFlag_IDLE>

		Pos = Rx_Buffer_Size - LL_DMA_GetDataLength(DMAx, Stream);
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	68b8      	ldr	r0, [r7, #8]
 8000c5e:	f7ff fd01 	bl	8000664 <LL_DMA_GetDataLength>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f1c3 030a 	rsb	r3, r3, #10
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <LL_UART_DMA_RX_IDLE_Interrupt+0x13c>)
 8000c6e:	701a      	strb	r2, [r3, #0]


		if(Pos == Old_Pos) { // Data Size = Rx_Buffer_Size
 8000c70:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <LL_UART_DMA_RX_IDLE_Interrupt+0x13c>)
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <LL_UART_DMA_RX_IDLE_Interrupt+0x140>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d111      	bne.n	8000ca0 <LL_UART_DMA_RX_IDLE_Interrupt+0x84>

			for(uint8_t i=0; i<Rx_Buffer_Size; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	75bb      	strb	r3, [r7, #22]
 8000c80:	e00a      	b.n	8000c98 <LL_UART_DMA_RX_IDLE_Interrupt+0x7c>

				Recieved_Data[i] = Rx_Buffer[i];
 8000c82:	7dbb      	ldrb	r3, [r7, #22]
 8000c84:	6a3a      	ldr	r2, [r7, #32]
 8000c86:	441a      	add	r2, r3
 8000c88:	7dbb      	ldrb	r3, [r7, #22]
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	440b      	add	r3, r1
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<Rx_Buffer_Size; i++){
 8000c92:	7dbb      	ldrb	r3, [r7, #22]
 8000c94:	3301      	adds	r3, #1
 8000c96:	75bb      	strb	r3, [r7, #22]
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	2b09      	cmp	r3, #9
 8000c9c:	d9f1      	bls.n	8000c82 <LL_UART_DMA_RX_IDLE_Interrupt+0x66>
 8000c9e:	e052      	b.n	8000d46 <LL_UART_DMA_RX_IDLE_Interrupt+0x12a>

			}

		}

		else if (Pos != Old_Pos){
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <LL_UART_DMA_RX_IDLE_Interrupt+0x13c>)
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <LL_UART_DMA_RX_IDLE_Interrupt+0x140>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d04c      	beq.n	8000d46 <LL_UART_DMA_RX_IDLE_Interrupt+0x12a>

			if(Pos > Old_Pos){
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <LL_UART_DMA_RX_IDLE_Interrupt+0x13c>)
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <LL_UART_DMA_RX_IDLE_Interrupt+0x140>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d919      	bls.n	8000cec <LL_UART_DMA_RX_IDLE_Interrupt+0xd0>
				//        * [   4   ]            |                                    				 |
				//        * [   5   ]            |---------------------------------------------------|
				//        * [   6   ] <- pos
				//        * [   7   ]
				//        * [ N - 1 ]
				uint8_t a = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
				for(uint8_t i=Old_Pos; i<Pos; i++){
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <LL_UART_DMA_RX_IDLE_Interrupt+0x140>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	753b      	strb	r3, [r7, #20]
 8000cc2:	e00d      	b.n	8000ce0 <LL_UART_DMA_RX_IDLE_Interrupt+0xc4>

					Recieved_Data[0+a] = Rx_Buffer[i];
 8000cc4:	7d3b      	ldrb	r3, [r7, #20]
 8000cc6:	6a3a      	ldr	r2, [r7, #32]
 8000cc8:	441a      	add	r2, r3
 8000cca:	7d7b      	ldrb	r3, [r7, #21]
 8000ccc:	6839      	ldr	r1, [r7, #0]
 8000cce:	440b      	add	r3, r1
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	701a      	strb	r2, [r3, #0]
					a++;
 8000cd4:	7d7b      	ldrb	r3, [r7, #21]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	757b      	strb	r3, [r7, #21]
				for(uint8_t i=Old_Pos; i<Pos; i++){
 8000cda:	7d3b      	ldrb	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	753b      	strb	r3, [r7, #20]
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <LL_UART_DMA_RX_IDLE_Interrupt+0x13c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	7d3a      	ldrb	r2, [r7, #20]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3ec      	bcc.n	8000cc4 <LL_UART_DMA_RX_IDLE_Interrupt+0xa8>
 8000cea:	e02c      	b.n	8000d46 <LL_UART_DMA_RX_IDLE_Interrupt+0x12a>
				//		             * [   7   ]            |                                 |
				//		             * [ N - 1 ]            |---------------------------------|
				//						DATA = FIRST BLOCK + SECOND BLOCK
//				uint8_t First_Block = Rx_Buffer_Size - Old_Pos;
//				uint8_t Second_Block = Pos;
				uint8_t Last_Position =0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	74fb      	strb	r3, [r7, #19]

				for(uint8_t i = Old_Pos; i<Rx_Buffer_Size; i++){ // first block copy to Recieved_Data
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <LL_UART_DMA_RX_IDLE_Interrupt+0x140>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	74bb      	strb	r3, [r7, #18]
 8000cf6:	e00d      	b.n	8000d14 <LL_UART_DMA_RX_IDLE_Interrupt+0xf8>
					Recieved_Data[Last_Position] = Rx_Buffer[i];
 8000cf8:	7cbb      	ldrb	r3, [r7, #18]
 8000cfa:	6a3a      	ldr	r2, [r7, #32]
 8000cfc:	441a      	add	r2, r3
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	440b      	add	r3, r1
 8000d04:	7812      	ldrb	r2, [r2, #0]
 8000d06:	701a      	strb	r2, [r3, #0]
					Last_Position++;
 8000d08:	7cfb      	ldrb	r3, [r7, #19]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	74fb      	strb	r3, [r7, #19]
				for(uint8_t i = Old_Pos; i<Rx_Buffer_Size; i++){ // first block copy to Recieved_Data
 8000d0e:	7cbb      	ldrb	r3, [r7, #18]
 8000d10:	3301      	adds	r3, #1
 8000d12:	74bb      	strb	r3, [r7, #18]
 8000d14:	7cbb      	ldrb	r3, [r7, #18]
 8000d16:	2b09      	cmp	r3, #9
 8000d18:	d9ee      	bls.n	8000cf8 <LL_UART_DMA_RX_IDLE_Interrupt+0xdc>
				}

				for(uint8_t i = 0; i < Pos; i++){ // second block copy to Recieved_Data
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	747b      	strb	r3, [r7, #17]
 8000d1e:	e00d      	b.n	8000d3c <LL_UART_DMA_RX_IDLE_Interrupt+0x120>

					Recieved_Data[Last_Position] = Rx_Buffer[i];
 8000d20:	7c7b      	ldrb	r3, [r7, #17]
 8000d22:	6a3a      	ldr	r2, [r7, #32]
 8000d24:	441a      	add	r2, r3
 8000d26:	7cfb      	ldrb	r3, [r7, #19]
 8000d28:	6839      	ldr	r1, [r7, #0]
 8000d2a:	440b      	add	r3, r1
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	701a      	strb	r2, [r3, #0]
					Last_Position++;
 8000d30:	7cfb      	ldrb	r3, [r7, #19]
 8000d32:	3301      	adds	r3, #1
 8000d34:	74fb      	strb	r3, [r7, #19]
				for(uint8_t i = 0; i < Pos; i++){ // second block copy to Recieved_Data
 8000d36:	7c7b      	ldrb	r3, [r7, #17]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	747b      	strb	r3, [r7, #17]
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <LL_UART_DMA_RX_IDLE_Interrupt+0x13c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	7c7a      	ldrb	r2, [r7, #17]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3ec      	bcc.n	8000d20 <LL_UART_DMA_RX_IDLE_Interrupt+0x104>
				}
			}
		}

		Old_Pos = Pos;
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <LL_UART_DMA_RX_IDLE_Interrupt+0x13c>)
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <LL_UART_DMA_RX_IDLE_Interrupt+0x140>)
 8000d4c:	701a      	strb	r2, [r3, #0]
	}

}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000062 	.word	0x20000062
 8000d5c:	20000063 	.word	0x20000063

08000d60 <__NVIC_GetPriorityGrouping>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <LL_DMA_SetDataTransferDirection>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <LL_DMA_SetDataTransferDirection+0x44>)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000e94:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <LL_DMA_SetDataTransferDirection+0x44>)
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	440b      	add	r3, r1
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	440b      	add	r3, r1
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	08003b1c 	.word	0x08003b1c

08000ebc <LL_DMA_SetMode>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LL_DMA_SetMode+0x44>)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000edc:	4908      	ldr	r1, [pc, #32]	; (8000f00 <LL_DMA_SetMode+0x44>)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	440b      	add	r3, r1
 8000eea:	4619      	mov	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	08003b1c 	.word	0x08003b1c

08000f04 <LL_DMA_SetPeriphIncMode>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LL_DMA_SetPeriphIncMode+0x44>)
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f24:	4908      	ldr	r1, [pc, #32]	; (8000f48 <LL_DMA_SetPeriphIncMode+0x44>)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	440b      	add	r3, r1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	440b      	add	r3, r1
 8000f32:	4619      	mov	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	08003b1c 	.word	0x08003b1c

08000f4c <LL_DMA_SetMemoryIncMode>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LL_DMA_SetMemoryIncMode+0x44>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <LL_DMA_SetMemoryIncMode+0x44>)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	440b      	add	r3, r1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	440b      	add	r3, r1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	08003b1c 	.word	0x08003b1c

08000f94 <LL_DMA_SetPeriphSize>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LL_DMA_SetPeriphSize+0x44>)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000fb4:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <LL_DMA_SetPeriphSize+0x44>)
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	440b      	add	r3, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	08003b1c 	.word	0x08003b1c

08000fdc <LL_DMA_SetMemorySize>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <LL_DMA_SetMemorySize+0x44>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000ffc:	4908      	ldr	r1, [pc, #32]	; (8001020 <LL_DMA_SetMemorySize+0x44>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	440b      	add	r3, r1
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	440b      	add	r3, r1
 800100a:	4619      	mov	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	08003b1c 	.word	0x08003b1c

08001024 <LL_DMA_SetStreamPriorityLevel>:
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001044:	4908      	ldr	r1, [pc, #32]	; (8001068 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	440b      	add	r3, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	440b      	add	r3, r1
 8001052:	4619      	mov	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	08003b1c 	.word	0x08003b1c

0800106c <LL_DMA_SetChannelSelection>:
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LL_DMA_SetChannelSelection+0x44>)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800108c:	4908      	ldr	r1, [pc, #32]	; (80010b0 <LL_DMA_SetChannelSelection+0x44>)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	440b      	add	r3, r1
 800109a:	4619      	mov	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	08003b1c 	.word	0x08003b1c

080010b4 <LL_DMA_DisableFifoMode>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <LL_DMA_DisableFifoMode+0x3c>)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <LL_DMA_DisableFifoMode+0x3c>)
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	440a      	add	r2, r1
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	4611      	mov	r1, r2
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	440a      	add	r2, r1
 80010dc:	f023 0304 	bic.w	r3, r3, #4
 80010e0:	6153      	str	r3, [r2, #20]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	08003b1c 	.word	0x08003b1c

080010f4 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <LL_RCC_HSE_EnableBypass+0x1c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <LL_RCC_HSE_EnableBypass+0x1c>)
 80010fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <LL_RCC_HSE_Enable+0x1c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <LL_RCC_HSE_Enable+0x1c>)
 800111e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <LL_RCC_HSE_IsReady+0x24>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001144:	bf0c      	ite	eq
 8001146:	2301      	moveq	r3, #1
 8001148:	2300      	movne	r3, #0
 800114a:	b2db      	uxtb	r3, r3
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <LL_RCC_SetSysClkSource+0x24>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 0203 	bic.w	r2, r3, #3
 800116c:	4904      	ldr	r1, [pc, #16]	; (8001180 <LL_RCC_SetSysClkSource+0x24>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	608b      	str	r3, [r1, #8]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40023800 	.word	0x40023800

08001184 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <LL_RCC_GetSysClkSource+0x18>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 030c 	and.w	r3, r3, #12
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b0:	4904      	ldr	r1, [pc, #16]	; (80011c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	608b      	str	r3, [r1, #8]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40023800 	.word	0x40023800

080011c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011d8:	4904      	ldr	r1, [pc, #16]	; (80011ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4313      	orrs	r3, r2
 80011de:	608b      	str	r3, [r1, #8]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	40023800 	.word	0x40023800

080011f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <LL_RCC_SetAPB2Prescaler+0x24>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001200:	4904      	ldr	r1, [pc, #16]	; (8001214 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	608b      	str	r3, [r1, #8]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800

08001218 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <LL_RCC_SetTIMPrescaler+0x28>)
 8001222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001226:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800122a:	4905      	ldr	r1, [pc, #20]	; (8001240 <LL_RCC_SetTIMPrescaler+0x28>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4313      	orrs	r3, r2
 8001230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40023800 	.word	0x40023800

08001244 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <LL_RCC_PLL_Enable+0x1c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <LL_RCC_PLL_Enable+0x1c>)
 800124e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800

08001264 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <LL_RCC_PLL_IsReady+0x24>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001274:	bf0c      	ite	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	2300      	movne	r3, #0
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	68f9      	ldr	r1, [r7, #12]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	4311      	orrs	r1, r2
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	0192      	lsls	r2, r2, #6
 80012ac:	430a      	orrs	r2, r1
 80012ae:	490c      	ldr	r1, [pc, #48]	; (80012e0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012bc:	4908      	ldr	r1, [pc, #32]	; (80012e0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80012cc:	4904      	ldr	r1, [pc, #16]	; (80012e0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40023800 	.word	0x40023800
 80012e4:	ffbf8000 	.word	0xffbf8000

080012e8 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	68f9      	ldr	r1, [r7, #12]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	4311      	orrs	r1, r2
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	0192      	lsls	r2, r2, #6
 8001308:	4311      	orrs	r1, r2
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	4904      	ldr	r1, [pc, #16]	; (8001320 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40023800 	.word	0x40023800
 8001324:	f0bf8000 	.word	0xf0bf8000

08001328 <LL_AHB1_GRP1_EnableClock>:
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4313      	orrs	r3, r2
 800133a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800133e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4013      	ands	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40023800 	.word	0x40023800

08001358 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4313      	orrs	r3, r2
 800136a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <LL_APB1_GRP1_EnableClock+0x2c>)
 800136e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40023800 	.word	0x40023800

08001388 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <LL_SYSCFG_SetEXTISource+0x68>)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	3302      	adds	r3, #2
 800139a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	43db      	mvns	r3, r3
 80013a4:	ea02 0103 	and.w	r1, r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	0c1b      	lsrs	r3, r3, #16
 80013ac:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	60fb      	str	r3, [r7, #12]
  return result;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 80013c0:	2320      	movs	r3, #32
 80013c2:	e003      	b.n	80013cc <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	fa03 f202 	lsl.w	r2, r3, r2
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <LL_SYSCFG_SetEXTISource+0x68>)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	430a      	orrs	r2, r1
 80013dc:	3302      	adds	r3, #2
 80013de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40013800 	.word	0x40013800

080013f4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <LL_FLASH_SetLatency+0x24>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 020f 	bic.w	r2, r3, #15
 8001404:	4904      	ldr	r1, [pc, #16]	; (8001418 <LL_FLASH_SetLatency+0x24>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40023c00 	.word	0x40023c00

0800141c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <LL_FLASH_GetLatency+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 030f 	and.w	r3, r3, #15
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00

08001438 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <LL_PWR_DisableOverDriveMode+0x1c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <LL_PWR_DisableOverDriveMode+0x1c>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40007000 	.word	0x40007000

08001458 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001468:	4904      	ldr	r1, [pc, #16]	; (800147c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40007000 	.word	0x40007000

08001480 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40007000 	.word	0x40007000

080014a8 <LL_USART_Enable>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_USART_ConfigAsyncMode>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	615a      	str	r2, [r3, #20]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b08b      	sub	sp, #44	; 0x2c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	613b      	str	r3, [r7, #16]
  return result;
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800151a:	2320      	movs	r3, #32
 800151c:	e003      	b.n	8001526 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2103      	movs	r1, #3
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	401a      	ands	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	fa93 f3a3 	rbit	r3, r3
 800153c:	61fb      	str	r3, [r7, #28]
  return result;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001548:	2320      	movs	r3, #32
 800154a:	e003      	b.n	8001554 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	601a      	str	r2, [r3, #0]
}
 8001562:	bf00      	nop
 8001564:	372c      	adds	r7, #44	; 0x2c
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800156e:	b480      	push	{r7}
 8001570:	b08b      	sub	sp, #44	; 0x2c
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	613b      	str	r3, [r7, #16]
  return result;
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001594:	2320      	movs	r3, #32
 8001596:	e003      	b.n	80015a0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2103      	movs	r1, #3
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	401a      	ands	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	61fb      	str	r3, [r7, #28]
  return result;
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80015c2:	2320      	movs	r3, #32
 80015c4:	e003      	b.n	80015ce <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	431a      	orrs	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	60da      	str	r2, [r3, #12]
}
 80015dc:	bf00      	nop
 80015de:	372c      	adds	r7, #44	; 0x2c
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	041a      	lsls	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	619a      	str	r2, [r3, #24]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160e:	f000 fbb9 	bl	8001d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001612:	f000 f841 	bl	8001698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001616:	f000 fa05 	bl	8001a24 <MX_GPIO_Init>
  MX_DMA_Init();
 800161a:	f000 f9db 	bl	80019d4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800161e:	f000 f959 	bl	80018d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001622:	f000 f9a9 	bl	8001978 <MX_USB_OTG_FS_PCD_Init>

  MX_USART2_UART_Init();
 8001626:	f000 f895 	bl	8001754 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_UART_DMA_RX_Config(USART2, DMA1, LL_AHB1_GRP1_PERIPH_DMA1, LL_DMA_STREAM_5,
 800162a:	230a      	movs	r3, #10
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <main+0x80>)
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	2310      	movs	r3, #16
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2305      	movs	r3, #5
 8001638:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800163c:	4913      	ldr	r1, [pc, #76]	; (800168c <main+0x84>)
 800163e:	4814      	ldr	r0, [pc, #80]	; (8001690 <main+0x88>)
 8001640:	f7ff f9fc 	bl	8000a3c <LL_UART_DMA_RX_Config>
		  DMA1_Stream5_IRQn, Rx_Buffer, sizeof(Rx_Buffer));

  LL_UART_DMA_TX_Config(USART2, DMA1, LL_AHB1_GRP1_PERIPH_DMA1, LL_DMA_STREAM_6,
 8001644:	2324      	movs	r3, #36	; 0x24
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <main+0x8c>)
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	2311      	movs	r3, #17
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2306      	movs	r3, #6
 8001652:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001656:	490d      	ldr	r1, [pc, #52]	; (800168c <main+0x84>)
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <main+0x88>)
 800165a:	f7ff fa31 	bl	8000ac0 <LL_UART_DMA_TX_Config>
  		  DMA1_Stream6_IRQn, Tx_Buffer, sizeof(Tx_Buffer));

  LL_UART_DMA_RX_Start(USART2, DMA1, LL_DMA_STREAM_5);
 800165e:	2205      	movs	r2, #5
 8001660:	490a      	ldr	r1, [pc, #40]	; (800168c <main+0x84>)
 8001662:	480b      	ldr	r0, [pc, #44]	; (8001690 <main+0x88>)
 8001664:	f7ff fa6c 	bl	8000b40 <LL_UART_DMA_RX_Start>

  LL_UART_DMA_TX_Start(USART2, DMA1, LL_DMA_STREAM_6);
 8001668:	2206      	movs	r2, #6
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <main+0x84>)
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <main+0x88>)
 800166e:	f7ff fa78 	bl	8000b62 <LL_UART_DMA_TX_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  LL_UART_DMA_TX_Start(USART2, DMA1, LL_DMA_STREAM_6);
 8001672:	2206      	movs	r2, #6
 8001674:	4905      	ldr	r1, [pc, #20]	; (800168c <main+0x84>)
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <main+0x88>)
 8001678:	f7ff fa73 	bl	8000b62 <LL_UART_DMA_TX_Start>
	  HAL_Delay(1000);
 800167c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001680:	f000 fbf2 	bl	8001e68 <HAL_Delay>
	  LL_UART_DMA_TX_Start(USART2, DMA1, LL_DMA_STREAM_6);
 8001684:	e7f5      	b.n	8001672 <main+0x6a>
 8001686:	bf00      	nop
 8001688:	2000004c 	.word	0x2000004c
 800168c:	40026000 	.word	0x40026000
 8001690:	40004400 	.word	0x40004400
 8001694:	20000000 	.word	0x20000000

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800169c:	2005      	movs	r0, #5
 800169e:	f7ff fea9 	bl	80013f4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80016a2:	bf00      	nop
 80016a4:	f7ff feba 	bl	800141c <LL_FLASH_GetLatency>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d1fa      	bne.n	80016a4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80016ae:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80016b2:	f7ff fed1 	bl	8001458 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 80016b6:	f7ff febf 	bl	8001438 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSE_EnableBypass();
 80016ba:	f7ff fd1b 	bl	80010f4 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 80016be:	f7ff fd29 	bl	8001114 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80016c2:	bf00      	nop
 80016c4:	f7ff fd36 	bl	8001134 <LL_RCC_HSE_IsReady>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d1fa      	bne.n	80016c4 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 80016ce:	2300      	movs	r3, #0
 80016d0:	22a8      	movs	r2, #168	; 0xa8
 80016d2:	2104      	movs	r1, #4
 80016d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80016d8:	f7ff fdd8 	bl	800128c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLQ_DIV_7);
 80016dc:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 80016e0:	22a8      	movs	r2, #168	; 0xa8
 80016e2:	2104      	movs	r1, #4
 80016e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80016e8:	f7ff fdfe 	bl	80012e8 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 80016ec:	f7ff fdaa 	bl	8001244 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80016f0:	bf00      	nop
 80016f2:	f7ff fdb7 	bl	8001264 <LL_RCC_PLL_IsReady>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d1fa      	bne.n	80016f2 <SystemClock_Config+0x5a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80016fc:	bf00      	nop
 80016fe:	f7ff febf 	bl	8001480 <LL_PWR_IsActiveFlag_VOS>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0fa      	beq.n	80016fe <SystemClock_Config+0x66>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fd49 	bl	80011a0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800170e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001712:	f7ff fd59 	bl	80011c8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001716:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800171a:	f7ff fd69 	bl	80011f0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800171e:	2002      	movs	r0, #2
 8001720:	f7ff fd1c 	bl	800115c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001724:	bf00      	nop
 8001726:	f7ff fd2d 	bl	8001184 <LL_RCC_GetSysClkSource>
 800172a:	4603      	mov	r3, r0
 800172c:	2b08      	cmp	r3, #8
 800172e:	d1fa      	bne.n	8001726 <SystemClock_Config+0x8e>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <SystemClock_Config+0xb8>)
 8001732:	f002 f9af 	bl	8003a94 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001736:	2000      	movs	r0, #0
 8001738:	f000 fb46 	bl	8001dc8 <HAL_InitTick>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001742:	f000 f9ef 	bl	8001b24 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff fd66 	bl	8001218 <LL_RCC_SetTIMPrescaler>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	0a037a00 	.word	0x0a037a00

08001754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
 800177c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800177e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001782:	f7ff fde9 	bl	8001358 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff fdce 	bl	8001328 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800178c:	230c      	movs	r3, #12
 800178e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001790:	2302      	movs	r3, #2
 8001792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80017a0:	2307      	movs	r3, #7
 80017a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4847      	ldr	r0, [pc, #284]	; (80018c8 <MX_USART2_UART_Init+0x174>)
 80017aa:	f001 f997 	bl	8002adc <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 80017ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b2:	2105      	movs	r1, #5
 80017b4:	4845      	ldr	r0, [pc, #276]	; (80018cc <MX_USART2_UART_Init+0x178>)
 80017b6:	f7ff fc59 	bl	800106c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2105      	movs	r1, #5
 80017be:	4843      	ldr	r0, [pc, #268]	; (80018cc <MX_USART2_UART_Init+0x178>)
 80017c0:	f7ff fb58 	bl	8000e74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_HIGH);
 80017c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017c8:	2105      	movs	r1, #5
 80017ca:	4840      	ldr	r0, [pc, #256]	; (80018cc <MX_USART2_UART_Init+0x178>)
 80017cc:	f7ff fc2a 	bl	8001024 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2105      	movs	r1, #5
 80017d4:	483d      	ldr	r0, [pc, #244]	; (80018cc <MX_USART2_UART_Init+0x178>)
 80017d6:	f7ff fb71 	bl	8000ebc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 80017da:	2200      	movs	r2, #0
 80017dc:	2105      	movs	r1, #5
 80017de:	483b      	ldr	r0, [pc, #236]	; (80018cc <MX_USART2_UART_Init+0x178>)
 80017e0:	f7ff fb90 	bl	8000f04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 80017e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e8:	2105      	movs	r1, #5
 80017ea:	4838      	ldr	r0, [pc, #224]	; (80018cc <MX_USART2_UART_Init+0x178>)
 80017ec:	f7ff fbae 	bl	8000f4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2105      	movs	r1, #5
 80017f4:	4835      	ldr	r0, [pc, #212]	; (80018cc <MX_USART2_UART_Init+0x178>)
 80017f6:	f7ff fbcd 	bl	8000f94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	4833      	ldr	r0, [pc, #204]	; (80018cc <MX_USART2_UART_Init+0x178>)
 8001800:	f7ff fbec 	bl	8000fdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8001804:	2105      	movs	r1, #5
 8001806:	4831      	ldr	r0, [pc, #196]	; (80018cc <MX_USART2_UART_Init+0x178>)
 8001808:	f7ff fc54 	bl	80010b4 <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 800180c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001810:	2106      	movs	r1, #6
 8001812:	482e      	ldr	r0, [pc, #184]	; (80018cc <MX_USART2_UART_Init+0x178>)
 8001814:	f7ff fc2a 	bl	800106c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001818:	2240      	movs	r2, #64	; 0x40
 800181a:	2106      	movs	r1, #6
 800181c:	482b      	ldr	r0, [pc, #172]	; (80018cc <MX_USART2_UART_Init+0x178>)
 800181e:	f7ff fb29 	bl	8000e74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_HIGH);
 8001822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001826:	2106      	movs	r1, #6
 8001828:	4828      	ldr	r0, [pc, #160]	; (80018cc <MX_USART2_UART_Init+0x178>)
 800182a:	f7ff fbfb 	bl	8001024 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 800182e:	2200      	movs	r2, #0
 8001830:	2106      	movs	r1, #6
 8001832:	4826      	ldr	r0, [pc, #152]	; (80018cc <MX_USART2_UART_Init+0x178>)
 8001834:	f7ff fb42 	bl	8000ebc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8001838:	2200      	movs	r2, #0
 800183a:	2106      	movs	r1, #6
 800183c:	4823      	ldr	r0, [pc, #140]	; (80018cc <MX_USART2_UART_Init+0x178>)
 800183e:	f7ff fb61 	bl	8000f04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8001842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001846:	2106      	movs	r1, #6
 8001848:	4820      	ldr	r0, [pc, #128]	; (80018cc <MX_USART2_UART_Init+0x178>)
 800184a:	f7ff fb7f 	bl	8000f4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 800184e:	2200      	movs	r2, #0
 8001850:	2106      	movs	r1, #6
 8001852:	481e      	ldr	r0, [pc, #120]	; (80018cc <MX_USART2_UART_Init+0x178>)
 8001854:	f7ff fb9e 	bl	8000f94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8001858:	2200      	movs	r2, #0
 800185a:	2106      	movs	r1, #6
 800185c:	481b      	ldr	r0, [pc, #108]	; (80018cc <MX_USART2_UART_Init+0x178>)
 800185e:	f7ff fbbd 	bl	8000fdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8001862:	2106      	movs	r1, #6
 8001864:	4819      	ldr	r0, [pc, #100]	; (80018cc <MX_USART2_UART_Init+0x178>)
 8001866:	f7ff fc25 	bl	80010b4 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800186a:	f7ff fa79 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 800186e:	4603      	mov	r3, r0
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fac9 	bl	8000e0c <NVIC_EncodePriority>
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	2026      	movs	r0, #38	; 0x26
 8001880:	f7ff fa9a 	bl	8000db8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001884:	2026      	movs	r0, #38	; 0x26
 8001886:	f7ff fa79 	bl	8000d7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */


  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800188a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800188e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800189c:	230c      	movs	r3, #12
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	4808      	ldr	r0, [pc, #32]	; (80018d0 <MX_USART2_UART_Init+0x17c>)
 80018b0:	f001 fd76 	bl	80033a0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_USART2_UART_Init+0x17c>)
 80018b6:	f7ff fe07 	bl	80014c8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_USART2_UART_Init+0x17c>)
 80018bc:	f7ff fdf4 	bl	80014a8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3738      	adds	r7, #56	; 0x38
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40026000 	.word	0x40026000
 80018d0:	40004400 	.word	0x40004400

080018d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08e      	sub	sp, #56	; 0x38
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80018fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001902:	f7ff fd29 	bl	8001358 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001906:	2008      	movs	r0, #8
 8001908:	f7ff fd0e 	bl	8001328 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800190c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001910:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001912:	2302      	movs	r3, #2
 8001914:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001922:	2307      	movs	r3, #7
 8001924:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4811      	ldr	r0, [pc, #68]	; (8001970 <MX_USART3_UART_Init+0x9c>)
 800192c:	f001 f8d6 	bl	8002adc <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001930:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001934:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001942:	230c      	movs	r3, #12
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_USART3_UART_Init+0xa0>)
 8001956:	f001 fd23 	bl	80033a0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <MX_USART3_UART_Init+0xa0>)
 800195c:	f7ff fdb4 	bl	80014c8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_USART3_UART_Init+0xa0>)
 8001962:	f7ff fda1 	bl	80014a8 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	3738      	adds	r7, #56	; 0x38
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020c00 	.word	0x40020c00
 8001974:	40004800 	.word	0x40004800

08001978 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001986:	2206      	movs	r2, #6
 8001988:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198c:	2202      	movs	r2, #2
 800198e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001998:	2202      	movs	r2, #2
 800199a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199e:	2201      	movs	r2, #1
 80019a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019bc:	f000 fcf2 	bl	80023a4 <HAL_PCD_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019c6:	f000 f8ad 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000064 	.word	0x20000064

080019d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80019d8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80019dc:	f7ff fca4 	bl	8001328 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019e0:	f7ff f9be 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fa0e 	bl	8000e0c <NVIC_EncodePriority>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	2010      	movs	r0, #16
 80019f6:	f7ff f9df 	bl	8000db8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019fa:	2010      	movs	r0, #16
 80019fc:	f7ff f9be 	bl	8000d7c <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a00:	f7ff f9ae 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f9fe 	bl	8000e0c <NVIC_EncodePriority>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4619      	mov	r1, r3
 8001a14:	2011      	movs	r0, #17
 8001a16:	f7ff f9cf 	bl	8000db8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a1a:	2011      	movs	r0, #17
 8001a1c:	f7ff f9ae 	bl	8000d7c <__NVIC_EnableIRQ>

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001a44:	2004      	movs	r0, #4
 8001a46:	f7ff fc6f 	bl	8001328 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001a4a:	2080      	movs	r0, #128	; 0x80
 8001a4c:	f7ff fc6c 	bl	8001328 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff fc69 	bl	8001328 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7ff fc66 	bl	8001328 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	f7ff fc63 	bl	8001328 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8001a62:	2040      	movs	r0, #64	; 0x40
 8001a64:	f7ff fc60 	bl	8001328 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8001a68:	f244 0181 	movw	r1, #16513	; 0x4081
 8001a6c:	4829      	ldr	r0, [pc, #164]	; (8001b14 <MX_GPIO_Init+0xf0>)
 8001a6e:	f7ff fdbb 	bl	80015e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin);
 8001a72:	2140      	movs	r1, #64	; 0x40
 8001a74:	4828      	ldr	r0, [pc, #160]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001a76:	f7ff fdb7 	bl	80015e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001a7a:	4928      	ldr	r1, [pc, #160]	; (8001b1c <MX_GPIO_Init+0xf8>)
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f7ff fc83 	bl	8001388 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a86:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001a90:	2301      	movs	r3, #1
 8001a92:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fe55 	bl	8002748 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_PULL_NO);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa4:	481e      	ldr	r0, [pc, #120]	; (8001b20 <MX_GPIO_Init+0xfc>)
 8001aa6:	f7ff fd62 	bl	800156e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_Btn_GPIO_Port, USER_Btn_Pin, LL_GPIO_MODE_INPUT);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab0:	481b      	ldr	r0, [pc, #108]	; (8001b20 <MX_GPIO_Init+0xfc>)
 8001ab2:	f7ff fd1f 	bl	80014f4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ab6:	f244 0381 	movw	r3, #16513	; 0x4081
 8001aba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001abc:	2301      	movs	r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	463b      	mov	r3, r7
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4810      	ldr	r0, [pc, #64]	; (8001b14 <MX_GPIO_Init+0xf0>)
 8001ad2:	f001 f803 	bl	8002adc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ada:	2301      	movs	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001aea:	463b      	mov	r3, r7
 8001aec:	4619      	mov	r1, r3
 8001aee:	480a      	ldr	r0, [pc, #40]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001af0:	f000 fff4 	bl	8002adc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b00:	463b      	mov	r3, r7
 8001b02:	4619      	mov	r1, r3
 8001b04:	4804      	ldr	r0, [pc, #16]	; (8001b18 <MX_GPIO_Init+0xf4>)
 8001b06:	f000 ffe9 	bl	8002adc <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40021800 	.word	0x40021800
 8001b1c:	00f00003 	.word	0x00f00003
 8001b20:	40020800 	.word	0x40020800

08001b24 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <Error_Handler+0x8>
	...

08001b30 <LL_RCC_SetUSBClockSource>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL, USBxSource);
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <LL_RCC_SetUSBClockSource+0x28>)
 8001b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001b42:	4905      	ldr	r1, [pc, #20]	; (8001b58 <LL_RCC_SetUSBClockSource+0x28>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_MspInit+0x4c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <HAL_MspInit+0x4c>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_MspInit+0x4c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_MspInit+0x4c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_MspInit+0x4c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bcc:	d142      	bne.n	8001c54 <HAL_PCD_MspInit+0xa8>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff ffae 	bl	8001b30 <LL_RCC_SetUSBClockSource>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_PCD_MspInit+0xb0>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <HAL_PCD_MspInit+0xb0>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6313      	str	r3, [r2, #48]	; 0x30
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_PCD_MspInit+0xb0>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001bf0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c02:	230a      	movs	r3, #10
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4814      	ldr	r0, [pc, #80]	; (8001c60 <HAL_PCD_MspInit+0xb4>)
 8001c0e:	f000 fa35 	bl	800207c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	480e      	ldr	r0, [pc, #56]	; (8001c60 <HAL_PCD_MspInit+0xb4>)
 8001c28:	f000 fa28 	bl	800207c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_PCD_MspInit+0xb0>)
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_PCD_MspInit+0xb0>)
 8001c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c36:	6353      	str	r3, [r2, #52]	; 0x34
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <HAL_PCD_MspInit+0xb0>)
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <HAL_PCD_MspInit+0xb0>)
 8001c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c46:	6453      	str	r3, [r2, #68]	; 0x44
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_PCD_MspInit+0xb0>)
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c68:	e7fe      	b.n	8001c68 <NMI_Handler+0x4>

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb0:	f000 f8ba 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	LL_UART_DMA_RX_Interrupt(DMA1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <DMA1_Stream5_IRQHandler+0x10>)
 8001cbe:	f7fe ff61 	bl	8000b84 <LL_UART_DMA_RX_Interrupt>
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40026000 	.word	0x40026000

08001ccc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */


	LL_UART_DMA_TX_Interrupt(DMA1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <DMA1_Stream6_IRQHandler+0x10>)
 8001cd2:	f7fe ff7d 	bl	8000bd0 <LL_UART_DMA_TX_Interrupt>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40026000 	.word	0x40026000

08001ce0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART2_IRQn 0 */
	LL_UART_DMA_RX_IDLE_Interrupt(USART2, DMA1, LL_DMA_STREAM_5, Recieved_Data, Rx_Buffer);
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <USART2_IRQHandler+0x1c>)
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <USART2_IRQHandler+0x20>)
 8001cec:	2205      	movs	r2, #5
 8001cee:	4905      	ldr	r1, [pc, #20]	; (8001d04 <USART2_IRQHandler+0x24>)
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <USART2_IRQHandler+0x28>)
 8001cf2:	f7fe ff93 	bl	8000c1c <LL_UART_DMA_RX_IDLE_Interrupt>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000004c 	.word	0x2000004c
 8001d00:	20000058 	.word	0x20000058
 8001d04:	40026000 	.word	0x40026000
 8001d08:	40004400 	.word	0x40004400

08001d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <SystemInit+0x20>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <SystemInit+0x20>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d34:	f7ff ffea 	bl	8001d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d3a:	490d      	ldr	r1, [pc, #52]	; (8001d70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d50:	4c0a      	ldr	r4, [pc, #40]	; (8001d7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d5e:	f001 fea9 	bl	8003ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d62:	f7ff fc51 	bl	8001608 <main>
  bx  lr    
 8001d66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d70:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001d74:	08003b4c 	.word	0x08003b4c
  ldr r2, =_sbss
 8001d78:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001d7c:	20000550 	.word	0x20000550

08001d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d80:	e7fe      	b.n	8001d80 <ADC_IRQHandler>
	...

08001d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_Init+0x40>)
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_Init+0x40>)
 8001d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_Init+0x40>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f000 f931 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f000 f808 	bl	8001dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db8:	f7ff fed0 	bl	8001b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x54>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x58>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f93b 	bl	8002062 <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00e      	b.n	8001e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d80a      	bhi.n	8001e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f000 f911 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_InitTick+0x5c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000024 	.word	0x20000024
 8001e20:	2000002c 	.word	0x2000002c
 8001e24:	20000028 	.word	0x20000028

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000002c 	.word	0x2000002c
 8001e4c:	2000054c 	.word	0x2000054c

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	2000054c 	.word	0x2000054c

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000002c 	.word	0x2000002c

08001eb0 <__NVIC_SetPriorityGrouping>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_SetPriority>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f7ff ff8e 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff47 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff5c 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff8e 	bl	8001f68 <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5d 	bl	8001f14 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffb0 	bl	8001fd0 <SysTick_Config>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e165      	b.n	8002364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002098:	2201      	movs	r2, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	f040 8154 	bne.w	800235e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d005      	beq.n	80020ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d130      	bne.n	8002130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002104:	2201      	movs	r2, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 0201 	and.w	r2, r3, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b03      	cmp	r3, #3
 800213a:	d017      	beq.n	800216c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d123      	bne.n	80021c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	08da      	lsrs	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3208      	adds	r2, #8
 8002180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80ae 	beq.w	800235e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b5d      	ldr	r3, [pc, #372]	; (800237c <HAL_GPIO_Init+0x300>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a5c      	ldr	r2, [pc, #368]	; (800237c <HAL_GPIO_Init+0x300>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b5a      	ldr	r3, [pc, #360]	; (800237c <HAL_GPIO_Init+0x300>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <HAL_GPIO_Init+0x304>)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4f      	ldr	r2, [pc, #316]	; (8002384 <HAL_GPIO_Init+0x308>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x21a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4e      	ldr	r2, [pc, #312]	; (8002388 <HAL_GPIO_Init+0x30c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x216>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4d      	ldr	r2, [pc, #308]	; (800238c <HAL_GPIO_Init+0x310>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x212>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_GPIO_Init+0x314>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x20e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4b      	ldr	r2, [pc, #300]	; (8002394 <HAL_GPIO_Init+0x318>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x20a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4a      	ldr	r2, [pc, #296]	; (8002398 <HAL_GPIO_Init+0x31c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x206>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a49      	ldr	r2, [pc, #292]	; (800239c <HAL_GPIO_Init+0x320>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x202>
 800227a:	2306      	movs	r3, #6
 800227c:	e00c      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 800227e:	2307      	movs	r3, #7
 8002280:	e00a      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 8002282:	2305      	movs	r3, #5
 8002284:	e008      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 8002286:	2304      	movs	r3, #4
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 800228a:	2303      	movs	r3, #3
 800228c:	e004      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 800228e:	2302      	movs	r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x21c>
 8002296:	2300      	movs	r3, #0
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	f002 0203 	and.w	r2, r2, #3
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	4093      	lsls	r3, r2
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a8:	4935      	ldr	r1, [pc, #212]	; (8002380 <HAL_GPIO_Init+0x304>)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b6:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <HAL_GPIO_Init+0x324>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022da:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <HAL_GPIO_Init+0x324>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_GPIO_Init+0x324>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002304:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <HAL_GPIO_Init+0x324>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230a:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_GPIO_Init+0x324>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_GPIO_Init+0x324>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_GPIO_Init+0x324>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_GPIO_Init+0x324>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	f67f ae96 	bls.w	8002098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	40013800 	.word	0x40013800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400
 800238c:	40020800 	.word	0x40020800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	40021000 	.word	0x40021000
 8002398:	40021400 	.word	0x40021400
 800239c:	40021800 	.word	0x40021800
 80023a0:	40013c00 	.word	0x40013c00

080023a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e108      	b.n	80025c8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d106      	bne.n	80023d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff fbeb 	bl	8001bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e4:	d102      	bne.n	80023ec <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 f8b9 	bl	8003568 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7c1a      	ldrb	r2, [r3, #16]
 80023fe:	f88d 2000 	strb.w	r2, [sp]
 8002402:	3304      	adds	r3, #4
 8002404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002406:	f001 f84b 	bl	80034a0 <USB_CoreInit>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0d5      	b.n	80025c8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f001 f8b1 	bl	800358a <USB_SetCurrentMode>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0c6      	b.n	80025c8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	e04a      	b.n	80024d6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3315      	adds	r3, #21
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3314      	adds	r3, #20
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	b298      	uxth	r0, r3
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	332e      	adds	r3, #46	; 0x2e
 800247c:	4602      	mov	r2, r0
 800247e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3318      	adds	r3, #24
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	331c      	adds	r3, #28
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	3320      	adds	r3, #32
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3324      	adds	r3, #36	; 0x24
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	3301      	adds	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	791b      	ldrb	r3, [r3, #4]
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d3af      	bcc.n	8002440 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e044      	b.n	8002570 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	f203 2355 	addw	r3, r3, #597	; 0x255
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	3301      	adds	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	791b      	ldrb	r3, [r3, #4]
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	429a      	cmp	r2, r3
 8002578:	d3b5      	bcc.n	80024e6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7c1a      	ldrb	r2, [r3, #16]
 8002582:	f88d 2000 	strb.w	r2, [sp]
 8002586:	3304      	adds	r3, #4
 8002588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258a:	f001 f84b 	bl	8003624 <USB_DevInit>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e013      	b.n	80025c8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7b1b      	ldrb	r3, [r3, #12]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f80a 	bl	80025d0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fa06 	bl	80039d2 <USB_DevDisconnect>

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002602:	f043 0303 	orr.w	r3, r3, #3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <LL_EXTI_EnableIT_0_31+0x20>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4904      	ldr	r1, [pc, #16]	; (8002638 <LL_EXTI_EnableIT_0_31+0x20>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40013c00 	.word	0x40013c00

0800263c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <LL_EXTI_DisableIT_0_31+0x24>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	43db      	mvns	r3, r3
 800264c:	4904      	ldr	r1, [pc, #16]	; (8002660 <LL_EXTI_DisableIT_0_31+0x24>)
 800264e:	4013      	ands	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40013c00 	.word	0x40013c00

08002664 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <LL_EXTI_EnableEvent_0_31+0x20>)
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4904      	ldr	r1, [pc, #16]	; (8002684 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]

}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40013c00 	.word	0x40013c00

08002688 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <LL_EXTI_DisableEvent_0_31+0x24>)
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	43db      	mvns	r3, r3
 8002698:	4904      	ldr	r1, [pc, #16]	; (80026ac <LL_EXTI_DisableEvent_0_31+0x24>)
 800269a:	4013      	ands	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	4904      	ldr	r1, [pc, #16]	; (80026d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]

}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4904      	ldr	r1, [pc, #16]	; (80026f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]

}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40013c00 	.word	0x40013c00

080026fc <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	4904      	ldr	r1, [pc, #16]	; (800271c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4313      	orrs	r3, r2
 800270e:	60cb      	str	r3, [r1, #12]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40013c00 	.word	0x40013c00

08002720 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	43db      	mvns	r3, r3
 8002730:	4904      	ldr	r1, [pc, #16]	; (8002744 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002732:	4013      	ands	r3, r2
 8002734:	60cb      	str	r3, [r1, #12]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40013c00 	.word	0x40013c00

08002748 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	791b      	ldrb	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d065      	beq.n	8002828 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d06b      	beq.n	800283c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	795b      	ldrb	r3, [r3, #5]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d01c      	beq.n	80027a6 <LL_EXTI_Init+0x5e>
 800276c:	2b02      	cmp	r3, #2
 800276e:	dc25      	bgt.n	80027bc <LL_EXTI_Init+0x74>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <LL_EXTI_Init+0x32>
 8002774:	2b01      	cmp	r3, #1
 8002776:	d00b      	beq.n	8002790 <LL_EXTI_Init+0x48>
 8002778:	e020      	b.n	80027bc <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff82 	bl	8002688 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff45 	bl	8002618 <LL_EXTI_EnableIT_0_31>
          break;
 800278e:	e018      	b.n	80027c2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff51 	bl	800263c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff60 	bl	8002664 <LL_EXTI_EnableEvent_0_31>
          break;
 80027a4:	e00d      	b.n	80027c2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff34 	bl	8002618 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff55 	bl	8002664 <LL_EXTI_EnableEvent_0_31>
          break;
 80027ba:	e002      	b.n	80027c2 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
          break;
 80027c0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	799b      	ldrb	r3, [r3, #6]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d038      	beq.n	800283c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	799b      	ldrb	r3, [r3, #6]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d01c      	beq.n	800280c <LL_EXTI_Init+0xc4>
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	dc25      	bgt.n	8002822 <LL_EXTI_Init+0xda>
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d002      	beq.n	80027e0 <LL_EXTI_Init+0x98>
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d00b      	beq.n	80027f6 <LL_EXTI_Init+0xae>
 80027de:	e020      	b.n	8002822 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff9b 	bl	8002720 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff5e 	bl	80026b0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80027f4:	e022      	b.n	800283c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff6a 	bl	80026d4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff79 	bl	80026fc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800280a:	e017      	b.n	800283c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff4d 	bl	80026b0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff6e 	bl	80026fc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002820:	e00c      	b.n	800283c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
            break;
 8002826:	e009      	b.n	800283c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff05 	bl	800263c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff26 	bl	8002688 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <LL_GPIO_SetPinMode>:
{
 8002846:	b480      	push	{r7}
 8002848:	b08b      	sub	sp, #44	; 0x2c
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	613b      	str	r3, [r7, #16]
  return result;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e003      	b.n	8002878 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2103      	movs	r1, #3
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	61fb      	str	r3, [r7, #28]
  return result;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e003      	b.n	80028a6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	431a      	orrs	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	601a      	str	r2, [r3, #0]
}
 80028b4:	bf00      	nop
 80028b6:	372c      	adds	r7, #44	; 0x2c
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_GPIO_SetPinOutputType>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	401a      	ands	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	431a      	orrs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	605a      	str	r2, [r3, #4]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_GPIO_SetPinSpeed>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	b08b      	sub	sp, #44	; 0x2c
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	613b      	str	r3, [r7, #16]
  return result;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e003      	b.n	8002922 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2103      	movs	r1, #3
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	401a      	ands	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	61fb      	str	r3, [r7, #28]
  return result;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e003      	b.n	8002950 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	609a      	str	r2, [r3, #8]
}
 800295e:	bf00      	nop
 8002960:	372c      	adds	r7, #44	; 0x2c
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_GPIO_SetPinPull>:
{
 800296a:	b480      	push	{r7}
 800296c:	b08b      	sub	sp, #44	; 0x2c
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	613b      	str	r3, [r7, #16]
  return result;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e003      	b.n	800299c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2103      	movs	r1, #3
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	61fb      	str	r3, [r7, #28]
  return result;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e003      	b.n	80029ca <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	60da      	str	r2, [r3, #12]
}
 80029d8:	bf00      	nop
 80029da:	372c      	adds	r7, #44	; 0x2c
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_GPIO_SetAFPin_0_7>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b08b      	sub	sp, #44	; 0x2c
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	613b      	str	r3, [r7, #16]
  return result;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e003      	b.n	8002a16 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	210f      	movs	r1, #15
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	401a      	ands	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	61fb      	str	r3, [r7, #28]
  return result;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	bf00      	nop
 8002a54:	372c      	adds	r7, #44	; 0x2c
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_GPIO_SetAFPin_8_15>:
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b08b      	sub	sp, #44	; 0x2c
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	613b      	str	r3, [r7, #16]
  return result;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002a86:	2320      	movs	r3, #32
 8002a88:	e003      	b.n	8002a92 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	210f      	movs	r1, #15
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	61fb      	str	r3, [r7, #28]
  return result;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	431a      	orrs	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ad0:	bf00      	nop
 8002ad2:	372c      	adds	r7, #44	; 0x2c
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	617b      	str	r3, [r7, #20]
  return result;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <LL_GPIO_Init+0x2e>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b14:	e057      	b.n	8002bc6 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	4013      	ands	r3, r2
 8002b24:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d049      	beq.n	8002bc0 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d003      	beq.n	8002b3c <LL_GPIO_Init+0x60>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d10d      	bne.n	8002b58 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	461a      	mov	r2, r3
 8002b42:	6a39      	ldr	r1, [r7, #32]
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff fed3 	bl	80028f0 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6a39      	ldr	r1, [r7, #32]
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff feb4 	bl	80028c0 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6a39      	ldr	r1, [r7, #32]
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff02 	bl	800296a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d121      	bne.n	8002bb2 <LL_GPIO_Init+0xd6>
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	60bb      	str	r3, [r7, #8]
  return result;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <LL_GPIO_Init+0xac>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e003      	b.n	8002b90 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002b90:	2b07      	cmp	r3, #7
 8002b92:	d807      	bhi.n	8002ba4 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6a39      	ldr	r1, [r7, #32]
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff21 	bl	80029e4 <LL_GPIO_SetAFPin_0_7>
 8002ba2:	e006      	b.n	8002bb2 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6a39      	ldr	r1, [r7, #32]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff56 	bl	8002a5e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff fe43 	bl	8002846 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1a0      	bne.n	8002b16 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3728      	adds	r7, #40	; 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <LL_RCC_GetSysClkSource>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <LL_RCC_GetSysClkSource+0x18>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800

08002bfc <LL_RCC_GetAHBPrescaler>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <LL_RCC_GetAHBPrescaler+0x18>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800

08002c18 <LL_RCC_GetAPB1Prescaler>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <LL_RCC_GetAPB2Prescaler>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <LL_RCC_PLL_GetMainSource+0x18>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <LL_RCC_PLL_GetN+0x18>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40023800 	.word	0x40023800

08002c88 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <LL_RCC_PLL_GetP+0x18>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <LL_RCC_PLL_GetR+0x18>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800

08002cc0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <LL_RCC_PLL_GetDivider+0x18>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002ce4:	f000 f820 	bl	8002d28 <RCC_GetSystemClockFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f85c 	bl	8002db0 <RCC_GetHCLKClockFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f86a 	bl	8002ddc <RCC_GetPCLK1ClockFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f876 	bl	8002e04 <RCC_GetPCLK2ClockFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60da      	str	r2, [r3, #12]
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002d32:	f7ff ff55 	bl	8002be0 <LL_RCC_GetSysClkSource>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	d82d      	bhi.n	8002d98 <RCC_GetSystemClockFreq+0x70>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <RCC_GetSystemClockFreq+0x1c>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002d99 	.word	0x08002d99
 8002d4c:	08002d99 	.word	0x08002d99
 8002d50:	08002d99 	.word	0x08002d99
 8002d54:	08002d7f 	.word	0x08002d7f
 8002d58:	08002d99 	.word	0x08002d99
 8002d5c:	08002d99 	.word	0x08002d99
 8002d60:	08002d99 	.word	0x08002d99
 8002d64:	08002d85 	.word	0x08002d85
 8002d68:	08002d99 	.word	0x08002d99
 8002d6c:	08002d99 	.word	0x08002d99
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	08002d8f 	.word	0x08002d8f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <RCC_GetSystemClockFreq+0x80>)
 8002d7a:	607b      	str	r3, [r7, #4]
      break;
 8002d7c:	e00f      	b.n	8002d9e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <RCC_GetSystemClockFreq+0x84>)
 8002d80:	607b      	str	r3, [r7, #4]
      break;
 8002d82:	e00c      	b.n	8002d9e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002d84:	2008      	movs	r0, #8
 8002d86:	f000 f851 	bl	8002e2c <RCC_PLL_GetFreqDomain_SYS>
 8002d8a:	6078      	str	r0, [r7, #4]
      break;
 8002d8c:	e007      	b.n	8002d9e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8002d8e:	200c      	movs	r0, #12
 8002d90:	f000 f84c 	bl	8002e2c <RCC_PLL_GetFreqDomain_SYS>
 8002d94:	6078      	str	r0, [r7, #4]
      break;
 8002d96:	e002      	b.n	8002d9e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <RCC_GetSystemClockFreq+0x80>)
 8002d9a:	607b      	str	r3, [r7, #4]
      break;
 8002d9c:	bf00      	nop
  }

  return frequency;
 8002d9e:	687b      	ldr	r3, [r7, #4]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	007a1200 	.word	0x007a1200

08002db0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002db8:	f7ff ff20 	bl	8002bfc <LL_RCC_GetAHBPrescaler>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <RCC_GetHCLKClockFreq+0x28>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	40d3      	lsrs	r3, r2
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08003b24 	.word	0x08003b24

08002ddc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002de4:	f7ff ff18 	bl	8002c18 <LL_RCC_GetAPB1Prescaler>
 8002de8:	4603      	mov	r3, r0
 8002dea:	0a9b      	lsrs	r3, r3, #10
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <RCC_GetPCLK1ClockFreq+0x24>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	461a      	mov	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	40d3      	lsrs	r3, r2
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08003b34 	.word	0x08003b34

08002e04 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002e0c:	f7ff ff12 	bl	8002c34 <LL_RCC_GetAPB2Prescaler>
 8002e10:	4603      	mov	r3, r0
 8002e12:	0b5b      	lsrs	r3, r3, #13
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <RCC_GetPCLK2ClockFreq+0x24>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	40d3      	lsrs	r3, r2
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	08003b34 	.word	0x08003b34

08002e2c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002e40:	f7ff ff06 	bl	8002c50 <LL_RCC_PLL_GetMainSource>
 8002e44:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e52:	d003      	beq.n	8002e5c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002e54:	e005      	b.n	8002e62 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002e58:	617b      	str	r3, [r7, #20]
      break;
 8002e5a:	e005      	b.n	8002e68 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8002e5e:	617b      	str	r3, [r7, #20]
      break;
 8002e60:	e002      	b.n	8002e68 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002e64:	617b      	str	r3, [r7, #20]
      break;
 8002e66:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d114      	bne.n	8002e98 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002e6e:	f7ff ff27 	bl	8002cc0 <LL_RCC_PLL_GetDivider>
 8002e72:	4602      	mov	r2, r0
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fbb3 f4f2 	udiv	r4, r3, r2
 8002e7a:	f7ff fef7 	bl	8002c6c <LL_RCC_PLL_GetN>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	fb03 f404 	mul.w	r4, r3, r4
 8002e84:	f7ff ff00 	bl	8002c88 <LL_RCC_PLL_GetP>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e011      	b.n	8002ebc <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002e98:	f7ff ff12 	bl	8002cc0 <LL_RCC_PLL_GetDivider>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	fbb3 f4f2 	udiv	r4, r3, r2
 8002ea4:	f7ff fee2 	bl	8002c6c <LL_RCC_PLL_GetN>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	fb03 f404 	mul.w	r4, r3, r4
 8002eae:	f7ff fef9 	bl	8002ca4 <LL_RCC_PLL_GetR>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	0f1b      	lsrs	r3, r3, #28
 8002eb6:	fbb4 f3f3 	udiv	r3, r4, r3
 8002eba:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002ebc:	693b      	ldr	r3, [r7, #16]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <LL_USART_IsEnabled>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_USART_SetStopBitsLength>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	611a      	str	r2, [r3, #16]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_USART_SetHWFlowCtrl>:
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	615a      	str	r2, [r3, #20]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_USART_SetBaudRate>:
{
 8002f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f48:	b0c0      	sub	sp, #256	; 0x100
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f50:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002f54:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002f58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f64:	f040 810c 	bne.w	8003180 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002f68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	1891      	adds	r1, r2, r2
 8002f80:	6639      	str	r1, [r7, #96]	; 0x60
 8002f82:	415b      	adcs	r3, r3
 8002f84:	667b      	str	r3, [r7, #100]	; 0x64
 8002f86:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	eb12 0801 	adds.w	r8, r2, r1
 8002f90:	4629      	mov	r1, r5
 8002f92:	eb43 0901 	adc.w	r9, r3, r1
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002faa:	4690      	mov	r8, r2
 8002fac:	4699      	mov	r9, r3
 8002fae:	4623      	mov	r3, r4
 8002fb0:	eb18 0303 	adds.w	r3, r8, r3
 8002fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fb8:	462b      	mov	r3, r5
 8002fba:	eb49 0303 	adc.w	r3, r9, r3
 8002fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	469a      	mov	sl, r3
 8002fca:	4693      	mov	fp, r2
 8002fcc:	eb1a 030a 	adds.w	r3, sl, sl
 8002fd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fd2:	eb4b 030b 	adc.w	r3, fp, fp
 8002fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fe0:	f7fd f910 	bl	8000204 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4b64      	ldr	r3, [pc, #400]	; (800317c <LL_USART_SetBaudRate+0x238>)
 8002fea:	fba3 2302 	umull	r2, r3, r3, r2
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	b29c      	uxth	r4, r3
 8002ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003000:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003004:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	6539      	str	r1, [r7, #80]	; 0x50
 8003010:	415b      	adcs	r3, r3
 8003012:	657b      	str	r3, [r7, #84]	; 0x54
 8003014:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003018:	4641      	mov	r1, r8
 800301a:	1851      	adds	r1, r2, r1
 800301c:	64b9      	str	r1, [r7, #72]	; 0x48
 800301e:	4649      	mov	r1, r9
 8003020:	414b      	adcs	r3, r1
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003030:	4659      	mov	r1, fp
 8003032:	00cb      	lsls	r3, r1, #3
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303a:	4651      	mov	r1, sl
 800303c:	00ca      	lsls	r2, r1, #3
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	4603      	mov	r3, r0
 8003044:	4642      	mov	r2, r8
 8003046:	189b      	adds	r3, r3, r2
 8003048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800304c:	464b      	mov	r3, r9
 800304e:	460a      	mov	r2, r1
 8003050:	eb42 0303 	adc.w	r3, r2, r3
 8003054:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003058:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800305c:	2200      	movs	r2, #0
 800305e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003062:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003066:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800306a:	460b      	mov	r3, r1
 800306c:	18db      	adds	r3, r3, r3
 800306e:	643b      	str	r3, [r7, #64]	; 0x40
 8003070:	4613      	mov	r3, r2
 8003072:	eb42 0303 	adc.w	r3, r2, r3
 8003076:	647b      	str	r3, [r7, #68]	; 0x44
 8003078:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800307c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003080:	f7fd f8c0 	bl	8000204 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4611      	mov	r1, r2
 800308a:	4b3c      	ldr	r3, [pc, #240]	; (800317c <LL_USART_SetBaudRate+0x238>)
 800308c:	fba3 2301 	umull	r2, r3, r3, r1
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	2264      	movs	r2, #100	; 0x64
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	1acb      	subs	r3, r1, r3
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030a0:	4b36      	ldr	r3, [pc, #216]	; (800317c <LL_USART_SetBaudRate+0x238>)
 80030a2:	fba3 2302 	umull	r2, r3, r3, r2
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	4423      	add	r3, r4
 80030b6:	b29c      	uxth	r4, r3
 80030b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030c6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80030ca:	4642      	mov	r2, r8
 80030cc:	464b      	mov	r3, r9
 80030ce:	1891      	adds	r1, r2, r2
 80030d0:	63b9      	str	r1, [r7, #56]	; 0x38
 80030d2:	415b      	adcs	r3, r3
 80030d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030da:	4641      	mov	r1, r8
 80030dc:	1851      	adds	r1, r2, r1
 80030de:	6339      	str	r1, [r7, #48]	; 0x30
 80030e0:	4649      	mov	r1, r9
 80030e2:	414b      	adcs	r3, r1
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030f2:	4659      	mov	r1, fp
 80030f4:	00cb      	lsls	r3, r1, #3
 80030f6:	4651      	mov	r1, sl
 80030f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fc:	4651      	mov	r1, sl
 80030fe:	00ca      	lsls	r2, r1, #3
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	4603      	mov	r3, r0
 8003106:	4642      	mov	r2, r8
 8003108:	189b      	adds	r3, r3, r2
 800310a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800310e:	464b      	mov	r3, r9
 8003110:	460a      	mov	r2, r1
 8003112:	eb42 0303 	adc.w	r3, r2, r3
 8003116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800311a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800311e:	2200      	movs	r2, #0
 8003120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003124:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003128:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800312c:	460b      	mov	r3, r1
 800312e:	18db      	adds	r3, r3, r3
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
 8003132:	4613      	mov	r3, r2
 8003134:	eb42 0303 	adc.w	r3, r2, r3
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800313e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003142:	f7fd f85f 	bl	8000204 <__aeabi_uldivmod>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <LL_USART_SetBaudRate+0x238>)
 800314c:	fba3 1302 	umull	r1, r3, r3, r2
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	2164      	movs	r1, #100	; 0x64
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	3332      	adds	r3, #50	; 0x32
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <LL_USART_SetBaudRate+0x238>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b29b      	uxth	r3, r3
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	b29b      	uxth	r3, r3
 800316e:	4423      	add	r3, r4
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003178:	609a      	str	r2, [r3, #8]
}
 800317a:	e108      	b.n	800338e <LL_USART_SetBaudRate+0x44a>
 800317c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003180:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003184:	2200      	movs	r2, #0
 8003186:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800318a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800318e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003192:	4642      	mov	r2, r8
 8003194:	464b      	mov	r3, r9
 8003196:	1891      	adds	r1, r2, r2
 8003198:	6239      	str	r1, [r7, #32]
 800319a:	415b      	adcs	r3, r3
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
 800319e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031a2:	4641      	mov	r1, r8
 80031a4:	1854      	adds	r4, r2, r1
 80031a6:	4649      	mov	r1, r9
 80031a8:	eb43 0501 	adc.w	r5, r3, r1
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	00eb      	lsls	r3, r5, #3
 80031b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ba:	00e2      	lsls	r2, r4, #3
 80031bc:	4614      	mov	r4, r2
 80031be:	461d      	mov	r5, r3
 80031c0:	4643      	mov	r3, r8
 80031c2:	18e3      	adds	r3, r4, r3
 80031c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031c8:	464b      	mov	r3, r9
 80031ca:	eb45 0303 	adc.w	r3, r5, r3
 80031ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80031d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80031ec:	4629      	mov	r1, r5
 80031ee:	008b      	lsls	r3, r1, #2
 80031f0:	4621      	mov	r1, r4
 80031f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f6:	4621      	mov	r1, r4
 80031f8:	008a      	lsls	r2, r1, #2
 80031fa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80031fe:	f7fd f801 	bl	8000204 <__aeabi_uldivmod>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4b65      	ldr	r3, [pc, #404]	; (800339c <LL_USART_SetBaudRate+0x458>)
 8003208:	fba3 2302 	umull	r2, r3, r3, r2
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	b29b      	uxth	r3, r3
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	b29c      	uxth	r4, r3
 8003214:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800321e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003222:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003226:	4642      	mov	r2, r8
 8003228:	464b      	mov	r3, r9
 800322a:	1891      	adds	r1, r2, r2
 800322c:	61b9      	str	r1, [r7, #24]
 800322e:	415b      	adcs	r3, r3
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003236:	4641      	mov	r1, r8
 8003238:	1851      	adds	r1, r2, r1
 800323a:	6139      	str	r1, [r7, #16]
 800323c:	4649      	mov	r1, r9
 800323e:	414b      	adcs	r3, r1
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800324e:	4659      	mov	r1, fp
 8003250:	00cb      	lsls	r3, r1, #3
 8003252:	4651      	mov	r1, sl
 8003254:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003258:	4651      	mov	r1, sl
 800325a:	00ca      	lsls	r2, r1, #3
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	4603      	mov	r3, r0
 8003262:	4642      	mov	r2, r8
 8003264:	189b      	adds	r3, r3, r2
 8003266:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800326a:	464b      	mov	r3, r9
 800326c:	460a      	mov	r2, r1
 800326e:	eb42 0303 	adc.w	r3, r2, r3
 8003272:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003276:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800327a:	2200      	movs	r2, #0
 800327c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003280:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003290:	4649      	mov	r1, r9
 8003292:	008b      	lsls	r3, r1, #2
 8003294:	4641      	mov	r1, r8
 8003296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329a:	4641      	mov	r1, r8
 800329c:	008a      	lsls	r2, r1, #2
 800329e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80032a2:	f7fc ffaf 	bl	8000204 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4611      	mov	r1, r2
 80032ac:	4b3b      	ldr	r3, [pc, #236]	; (800339c <LL_USART_SetBaudRate+0x458>)
 80032ae:	fba3 2301 	umull	r2, r3, r3, r1
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2264      	movs	r2, #100	; 0x64
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	1acb      	subs	r3, r1, r3
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	3332      	adds	r3, #50	; 0x32
 80032c0:	4a36      	ldr	r2, [pc, #216]	; (800339c <LL_USART_SetBaudRate+0x458>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	4423      	add	r3, r4
 80032d2:	b29c      	uxth	r4, r3
 80032d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032d8:	2200      	movs	r2, #0
 80032da:	67bb      	str	r3, [r7, #120]	; 0x78
 80032dc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032de:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032e2:	4642      	mov	r2, r8
 80032e4:	464b      	mov	r3, r9
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f2:	4641      	mov	r1, r8
 80032f4:	1851      	adds	r1, r2, r1
 80032f6:	6039      	str	r1, [r7, #0]
 80032f8:	4649      	mov	r1, r9
 80032fa:	414b      	adcs	r3, r1
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800330a:	4659      	mov	r1, fp
 800330c:	00cb      	lsls	r3, r1, #3
 800330e:	4651      	mov	r1, sl
 8003310:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003314:	4651      	mov	r1, sl
 8003316:	00ca      	lsls	r2, r1, #3
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	4603      	mov	r3, r0
 800331e:	4642      	mov	r2, r8
 8003320:	189b      	adds	r3, r3, r2
 8003322:	673b      	str	r3, [r7, #112]	; 0x70
 8003324:	464b      	mov	r3, r9
 8003326:	460a      	mov	r2, r1
 8003328:	eb42 0303 	adc.w	r3, r2, r3
 800332c:	677b      	str	r3, [r7, #116]	; 0x74
 800332e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003332:	2200      	movs	r2, #0
 8003334:	66bb      	str	r3, [r7, #104]	; 0x68
 8003336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003344:	4649      	mov	r1, r9
 8003346:	008b      	lsls	r3, r1, #2
 8003348:	4641      	mov	r1, r8
 800334a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800334e:	4641      	mov	r1, r8
 8003350:	008a      	lsls	r2, r1, #2
 8003352:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003356:	f7fc ff55 	bl	8000204 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4b0f      	ldr	r3, [pc, #60]	; (800339c <LL_USART_SetBaudRate+0x458>)
 8003360:	fba3 1302 	umull	r1, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2164      	movs	r1, #100	; 0x64
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <LL_USART_SetBaudRate+0x458>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	b29b      	uxth	r3, r3
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	b29b      	uxth	r3, r3
 8003382:	4423      	add	r3, r4
 8003384:	b29b      	uxth	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338c:	609a      	str	r2, [r3, #8]
}
 800338e:	bf00      	nop
 8003390:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003394:	46bd      	mov	sp, r7
 8003396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339a:	bf00      	nop
 800339c:	51eb851f 	.word	0x51eb851f

080033a0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff fd8c 	bl	8002ed0 <LL_USART_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d15e      	bne.n	800347c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033c6:	f023 030c 	bic.w	r3, r3, #12
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	6851      	ldr	r1, [r2, #4]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	4311      	orrs	r1, r2
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	6912      	ldr	r2, [r2, #16]
 80033d8:	4311      	orrs	r1, r2
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	6992      	ldr	r2, [r2, #24]
 80033de:	430a      	orrs	r2, r1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff fd83 	bl	8002ef8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4619      	mov	r1, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fd90 	bl	8002f1e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80033fe:	f107 0308 	add.w	r3, r7, #8
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fc6a 	bl	8002cdc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <LL_USART_Init+0xe8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d102      	bne.n	8003416 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	e021      	b.n	800345a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <LL_USART_Init+0xec>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d102      	bne.n	8003424 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e01a      	b.n	800345a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a1a      	ldr	r2, [pc, #104]	; (8003490 <LL_USART_Init+0xf0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d102      	bne.n	8003432 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	e013      	b.n	800345a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a17      	ldr	r2, [pc, #92]	; (8003494 <LL_USART_Init+0xf4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d102      	bne.n	8003440 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	e00c      	b.n	800345a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a15      	ldr	r2, [pc, #84]	; (8003498 <LL_USART_Init+0xf8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d102      	bne.n	800344e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	e005      	b.n	800345a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <LL_USART_Init+0xfc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff fd64 	bl	8002f44 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800347c:	7ffb      	ldrb	r3, [r7, #31]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40011000 	.word	0x40011000
 800348c:	40004400 	.word	0x40004400
 8003490:	40004800 	.word	0x40004800
 8003494:	40011400 	.word	0x40011400
 8003498:	40004c00 	.word	0x40004c00
 800349c:	40005000 	.word	0x40005000

080034a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034a0:	b084      	sub	sp, #16
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	f107 001c 	add.w	r0, r7, #28
 80034ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d123      	bne.n	8003502 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fa9a 	bl	8003a30 <USB_CoreReset>
 80034fc:	4603      	mov	r3, r0
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e01b      	b.n	800353a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa8e 	bl	8003a30 <USB_CoreReset>
 8003514:	4603      	mov	r3, r0
 8003516:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003518:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
 800352c:	e005      	b.n	800353a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800353a:	7fbb      	ldrb	r3, [r7, #30]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10b      	bne.n	8003558 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f043 0206 	orr.w	r2, r3, #6
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003564:	b004      	add	sp, #16
 8003566:	4770      	bx	lr

08003568 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 0201 	bic.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d115      	bne.n	80035d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80035b8:	200a      	movs	r0, #10
 80035ba:	f7fe fc55 	bl	8001e68 <HAL_Delay>
      ms += 10U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	330a      	adds	r3, #10
 80035c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fa25 	bl	8003a14 <USB_GetMode>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d01e      	beq.n	800360e <USB_SetCurrentMode+0x84>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2bc7      	cmp	r3, #199	; 0xc7
 80035d4:	d9f0      	bls.n	80035b8 <USB_SetCurrentMode+0x2e>
 80035d6:	e01a      	b.n	800360e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d115      	bne.n	800360a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80035ea:	200a      	movs	r0, #10
 80035ec:	f7fe fc3c 	bl	8001e68 <HAL_Delay>
      ms += 10U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	330a      	adds	r3, #10
 80035f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa0c 	bl	8003a14 <USB_GetMode>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <USB_SetCurrentMode+0x84>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2bc7      	cmp	r3, #199	; 0xc7
 8003606:	d9f0      	bls.n	80035ea <USB_SetCurrentMode+0x60>
 8003608:	e001      	b.n	800360e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e005      	b.n	800361a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2bc8      	cmp	r3, #200	; 0xc8
 8003612:	d101      	bne.n	8003618 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003624:	b084      	sub	sp, #16
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e009      	b.n	8003658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	3340      	adds	r3, #64	; 0x40
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	3301      	adds	r3, #1
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b0e      	cmp	r3, #14
 800365c:	d9f2      	bls.n	8003644 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800365e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11c      	bne.n	80036a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e005      	b.n	80036ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036b2:	461a      	mov	r2, r3
 80036b4:	2300      	movs	r3, #0
 80036b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036b8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10d      	bne.n	80036dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036c8:	2100      	movs	r1, #0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f968 	bl	80039a0 <USB_SetDevSpeed>
 80036d0:	e008      	b.n	80036e4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036d2:	2101      	movs	r1, #1
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f963 	bl	80039a0 <USB_SetDevSpeed>
 80036da:	e003      	b.n	80036e4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036dc:	2103      	movs	r1, #3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f95e 	bl	80039a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036e4:	2110      	movs	r1, #16
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8fa 	bl	80038e0 <USB_FlushTxFifo>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f924 	bl	8003944 <USB_FlushRxFifo>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	461a      	mov	r2, r3
 800370e:	2300      	movs	r3, #0
 8003710:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003718:	461a      	mov	r2, r3
 800371a:	2300      	movs	r3, #0
 800371c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003724:	461a      	mov	r2, r3
 8003726:	2300      	movs	r3, #0
 8003728:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	e043      	b.n	80037b8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003746:	d118      	bne.n	800377a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	461a      	mov	r2, r3
 800375c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e013      	b.n	800378c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	461a      	mov	r2, r3
 8003772:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	e008      	b.n	800378c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003786:	461a      	mov	r2, r3
 8003788:	2300      	movs	r3, #0
 800378a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003798:	461a      	mov	r2, r3
 800379a:	2300      	movs	r3, #0
 800379c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037aa:	461a      	mov	r2, r3
 80037ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	3301      	adds	r3, #1
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037bc:	461a      	mov	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d3b5      	bcc.n	8003730 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	e043      	b.n	8003852 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e0:	d118      	bne.n	8003814 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	461a      	mov	r2, r3
 80037f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e013      	b.n	8003826 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380a:	461a      	mov	r2, r3
 800380c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e008      	b.n	8003826 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	2300      	movs	r3, #0
 8003824:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	461a      	mov	r2, r3
 8003834:	2300      	movs	r3, #0
 8003836:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	461a      	mov	r2, r3
 8003846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800384a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	3301      	adds	r3, #1
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003856:	461a      	mov	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4293      	cmp	r3, r2
 800385c:	d3b5      	bcc.n	80037ca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003870:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800387e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <USB_DevInit+0x2b8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f043 0208 	orr.w	r2, r3, #8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d107      	bne.n	80038cc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038d8:	b004      	add	sp, #16
 80038da:	4770      	bx	lr
 80038dc:	803c3800 	.word	0x803c3800

080038e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3301      	adds	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80038fa:	d901      	bls.n	8003900 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e01b      	b.n	8003938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	daf2      	bge.n	80038ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	019b      	lsls	r3, r3, #6
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3301      	adds	r3, #1
 800391c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003924:	d901      	bls.n	800392a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e006      	b.n	8003938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b20      	cmp	r3, #32
 8003934:	d0f0      	beq.n	8003918 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800395c:	d901      	bls.n	8003962 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e018      	b.n	8003994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	daf2      	bge.n	8003950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2210      	movs	r2, #16
 8003972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003980:	d901      	bls.n	8003986 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e006      	b.n	8003994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b10      	cmp	r3, #16
 8003990:	d0f0      	beq.n	8003974 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039c0:	4313      	orrs	r3, r2
 80039c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80039ec:	f023 0303 	bic.w	r3, r3, #3
 80039f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a00:	f043 0302 	orr.w	r3, r3, #2
 8003a04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0301 	and.w	r3, r3, #1
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003a48:	d901      	bls.n	8003a4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e01b      	b.n	8003a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	daf2      	bge.n	8003a3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003a72:	d901      	bls.n	8003a78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e006      	b.n	8003a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d0f0      	beq.n	8003a66 <USB_CoreReset+0x36>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <LL_SetSystemCoreClock+0x1c>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6013      	str	r3, [r2, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000024 	.word	0x20000024

08003ab4 <__libc_init_array>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4d0d      	ldr	r5, [pc, #52]	; (8003aec <__libc_init_array+0x38>)
 8003ab8:	4c0d      	ldr	r4, [pc, #52]	; (8003af0 <__libc_init_array+0x3c>)
 8003aba:	1b64      	subs	r4, r4, r5
 8003abc:	10a4      	asrs	r4, r4, #2
 8003abe:	2600      	movs	r6, #0
 8003ac0:	42a6      	cmp	r6, r4
 8003ac2:	d109      	bne.n	8003ad8 <__libc_init_array+0x24>
 8003ac4:	4d0b      	ldr	r5, [pc, #44]	; (8003af4 <__libc_init_array+0x40>)
 8003ac6:	4c0c      	ldr	r4, [pc, #48]	; (8003af8 <__libc_init_array+0x44>)
 8003ac8:	f000 f818 	bl	8003afc <_init>
 8003acc:	1b64      	subs	r4, r4, r5
 8003ace:	10a4      	asrs	r4, r4, #2
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	42a6      	cmp	r6, r4
 8003ad4:	d105      	bne.n	8003ae2 <__libc_init_array+0x2e>
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003adc:	4798      	blx	r3
 8003ade:	3601      	adds	r6, #1
 8003ae0:	e7ee      	b.n	8003ac0 <__libc_init_array+0xc>
 8003ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae6:	4798      	blx	r3
 8003ae8:	3601      	adds	r6, #1
 8003aea:	e7f2      	b.n	8003ad2 <__libc_init_array+0x1e>
 8003aec:	08003b44 	.word	0x08003b44
 8003af0:	08003b44 	.word	0x08003b44
 8003af4:	08003b44 	.word	0x08003b44
 8003af8:	08003b48 	.word	0x08003b48

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr
