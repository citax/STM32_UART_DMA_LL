
NUCLEO-F446ZE_UART_DMA_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000457c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004768  08004768  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004770  08004770  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000030  080047a8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  080047a8  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8df  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002386  00000000  00000000  0002c982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0002ed08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000978  00000000  00000000  0002f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ba0  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9fa  00000000  00000000  00053ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5ec8  00000000  00000000  000618d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034f0  00000000  00000000  0013779c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013ac8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000030 	.word	0x20000030
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004728 	.word	0x08004728

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000034 	.word	0x20000034
 8000200:	08004728 	.word	0x08004728

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	db0b      	blt.n	800052a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 021f 	and.w	r2, r3, #31
 8000518:	4907      	ldr	r1, [pc, #28]	; (8000538 <__NVIC_EnableIRQ+0x38>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	2001      	movs	r0, #1
 8000522:	fa00 f202 	lsl.w	r2, r0, r2
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000e100 	.word	0xe000e100

0800053c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db0a      	blt.n	8000566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	490c      	ldr	r1, [pc, #48]	; (8000588 <__NVIC_SetPriority+0x4c>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	0112      	lsls	r2, r2, #4
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	440b      	add	r3, r1
 8000560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000564:	e00a      	b.n	800057c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4908      	ldr	r1, [pc, #32]	; (800058c <__NVIC_SetPriority+0x50>)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 030f 	and.w	r3, r3, #15
 8000572:	3b04      	subs	r3, #4
 8000574:	0112      	lsls	r2, r2, #4
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	440b      	add	r3, r1
 800057a:	761a      	strb	r2, [r3, #24]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000e100 	.word	0xe000e100
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f003 0310 	and.w	r3, r3, #16
 80005a0:	2b10      	cmp	r3, #16
 80005a2:	bf0c      	ite	eq
 80005a4:	2301      	moveq	r3, #1
 80005a6:	2300      	movne	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80005c4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80005cc:	68fb      	ldr	r3, [r7, #12]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80005da:	b480      	push	{r7}
 80005dc:	b089      	sub	sp, #36	; 0x24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	330c      	adds	r3, #12
 80005e6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	e853 3f00 	ldrex	r3, [r3]
 80005ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	61fb      	str	r3, [r7, #28]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	330c      	adds	r3, #12
 80005fc:	69fa      	ldr	r2, [r7, #28]
 80005fe:	61ba      	str	r2, [r7, #24]
 8000600:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000602:	6979      	ldr	r1, [r7, #20]
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	e841 2300 	strex	r3, r2, [r1]
 800060a:	613b      	str	r3, [r7, #16]
   return(result);
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1e7      	bne.n	80005e2 <LL_USART_EnableIT_IDLE+0x8>
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3724      	adds	r7, #36	; 0x24
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000620:	b480      	push	{r7}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3314      	adds	r3, #20
 800062c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	e853 3f00 	ldrex	r3, [r3]
 8000634:	60bb      	str	r3, [r7, #8]
   return(result);
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063c:	61fb      	str	r3, [r7, #28]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3314      	adds	r3, #20
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	61ba      	str	r2, [r7, #24]
 8000646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000648:	6979      	ldr	r1, [r7, #20]
 800064a:	69ba      	ldr	r2, [r7, #24]
 800064c:	e841 2300 	strex	r3, r2, [r1]
 8000650:	613b      	str	r3, [r7, #16]
   return(result);
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1e7      	bne.n	8000628 <LL_USART_EnableDMAReq_RX+0x8>
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3724      	adds	r7, #36	; 0x24
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000666:	b480      	push	{r7}
 8000668:	b089      	sub	sp, #36	; 0x24
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3314      	adds	r3, #20
 8000672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	e853 3f00 	ldrex	r3, [r3]
 800067a:	60bb      	str	r3, [r7, #8]
   return(result);
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000682:	61fb      	str	r3, [r7, #28]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3314      	adds	r3, #20
 8000688:	69fa      	ldr	r2, [r7, #28]
 800068a:	61ba      	str	r2, [r7, #24]
 800068c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800068e:	6979      	ldr	r1, [r7, #20]
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	e841 2300 	strex	r3, r2, [r1]
 8000696:	613b      	str	r3, [r7, #16]
   return(result);
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1e7      	bne.n	800066e <LL_USART_EnableDMAReq_TX+0x8>
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3724      	adds	r7, #36	; 0x24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3304      	adds	r3, #4
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d0:	4907      	ldr	r1, [pc, #28]	; (80006f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4013      	ands	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006e2:	68fb      	ldr	r3, [r7, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40023800 	.word	0x40023800

080006f4 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80006fe:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <LL_DMA_EnableStream+0x3c>)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4413      	add	r3, r2
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <LL_DMA_EnableStream+0x3c>)
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	440a      	add	r2, r1
 8000714:	7812      	ldrb	r2, [r2, #0]
 8000716:	4611      	mov	r1, r2
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	440a      	add	r2, r1
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6013      	str	r3, [r2, #0]
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	08004740 	.word	0x08004740

08000734 <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  *@retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Configuration)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <LL_DMA_ConfigTransfer+0x48>)
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 335f 	bic.w	r3, r3, #228352	; 0x37c00
 8000754:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8000758:	4908      	ldr	r1, [pc, #32]	; (800077c <LL_DMA_ConfigTransfer+0x48>)
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	440a      	add	r2, r1
 800075e:	7812      	ldrb	r2, [r2, #0]
 8000760:	4611      	mov	r1, r2
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	440a      	add	r2, r1
 8000766:	4611      	mov	r1, r2
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	4313      	orrs	r3, r2
 800076c:	600b      	str	r3, [r1, #0]
             DMA_SxCR_DIR | DMA_SxCR_CIRC | DMA_SxCR_PINC | DMA_SxCR_MINC | DMA_SxCR_PSIZE | DMA_SxCR_MSIZE | DMA_SxCR_PL | DMA_SxCR_PFCTRL,
             Configuration);
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	08004740 	.word	0x08004740

08000780 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <LL_DMA_SetDataLength+0x44>)
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	4413      	add	r3, r2
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	0c1b      	lsrs	r3, r3, #16
 800079e:	041b      	lsls	r3, r3, #16
 80007a0:	4908      	ldr	r1, [pc, #32]	; (80007c4 <LL_DMA_SetDataLength+0x44>)
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	440a      	add	r2, r1
 80007a6:	7812      	ldrb	r2, [r2, #0]
 80007a8:	4611      	mov	r1, r2
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	440a      	add	r2, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	604b      	str	r3, [r1, #4]
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	08004740 	.word	0x08004740

080007c8 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef* DMAx, uint32_t Stream)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 80007d2:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <LL_DMA_GetDataLength+0x28>)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	b29b      	uxth	r3, r3
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	08004740 	.word	0x08004740

080007f4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
 8000800:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	2b40      	cmp	r3, #64	; 0x40
 8000806:	d114      	bne.n	8000832 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <LL_DMA_ConfigAddresses+0x74>)
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <LL_DMA_ConfigAddresses+0x74>)
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4413      	add	r3, r2
 800082a:	461a      	mov	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8000830:	e013      	b.n	800085a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8000832:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LL_DMA_ConfigAddresses+0x74>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4413      	add	r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4413      	add	r3, r2
 8000840:	461a      	mov	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <LL_DMA_ConfigAddresses+0x74>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	461a      	mov	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4413      	add	r3, r2
 8000854:	461a      	mov	r2, r3
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	60d3      	str	r3, [r2, #12]
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	08004740 	.word	0x08004740

0800086c <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll HISR  TCIF0    LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800087c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000880:	bf0c      	ite	eq
 8000882:	2301      	moveq	r3, #1
 8000884:	2300      	movne	r3, #0
 8000886:	b2db      	uxtb	r3, r3
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll HISR  TCIF6    LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <LL_DMA_IsActiveFlag_TE5>:
  * @rmtoll HISR  TEIF0    LL_DMA_IsActiveFlag_TE5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF5)==(DMA_HISR_TEIF5));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008d0:	bf0c      	ite	eq
 80008d2:	2301      	moveq	r3, #1
 80008d4:	2300      	movne	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_DMA_IsActiveFlag_TE6>:
  * @rmtoll HISR  TEIF6    LL_DMA_IsActiveFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF6)==(DMA_HISR_TEIF6));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80008f8:	bf0c      	ite	eq
 80008fa:	2301      	moveq	r3, #1
 80008fc:	2300      	movne	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <LL_DMA_ClearFlag_TC5>:
  * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800091a:	60da      	str	r2, [r3, #12]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000936:	60da      	str	r2, [r3, #12]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_DMA_ClearFlag_TE5>:
  * @rmtoll HIFCR  CTEIF5    LL_DMA_ClearFlag_TE5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF5);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000952:	60da      	str	r2, [r3, #12]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <LL_DMA_ClearFlag_TE6>:
  * @rmtoll HIFCR  CTEIF6    LL_DMA_ClearFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800096e:	60da      	str	r2, [r3, #12]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 8000986:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <LL_DMA_EnableIT_TE+0x3c>)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4413      	add	r3, r2
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <LL_DMA_EnableIT_TE+0x3c>)
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	440a      	add	r2, r1
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	4611      	mov	r1, r2
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	440a      	add	r2, r1
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6013      	str	r3, [r2, #0]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	08004740 	.word	0x08004740

080009bc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80009c6:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <LL_DMA_EnableIT_TC+0x3c>)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4413      	add	r3, r2
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <LL_DMA_EnableIT_TC+0x3c>)
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	440a      	add	r2, r1
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	4611      	mov	r1, r2
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	440a      	add	r2, r1
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	6013      	str	r3, [r2, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	08004740 	.word	0x08004740

080009fc <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 8000a06:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <LL_DMA_DisableIT_HT+0x3c>)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <LL_DMA_DisableIT_HT+0x3c>)
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	440a      	add	r2, r1
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	440a      	add	r2, r1
 8000a24:	f023 0308 	bic.w	r3, r3, #8
 8000a28:	6013      	str	r3, [r2, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	08004740 	.word	0x08004740

08000a3c <Low_Level_UART_DMA_RX_Config>:
 * @Function_Brief  : Config function for LL Uart Rx. Use this function in the
 * 					  MX_USART2_UART_Init() or use after UART and DMA Init func.
 ******************************************************************************/

void Low_Level_UART_DMA_RX_Config(USART_TypeDef *USARTx ,DMA_TypeDef *DMAx, uint32_t Periphs ,
		uint32_t Stream, IRQn_Type IRQn, uint8_t DstAddress[], uint8_t Rx_Buffer_Size) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]

	// Enable DMA Clock.
	LL_AHB1_GRP1_EnableClock(Periphs);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe3a 	bl	80006c4 <LL_AHB1_GRP1_EnableClock>

	/*ENABLE DMA NVIC PRIOTIRY*/
	NVIC_SetPriority(IRQn, 0);
 8000a50:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd70 	bl	800053c <__NVIC_SetPriority>

	/*ENABLE DMA NVIC IRQN*/
	NVIC_EnableIRQ(IRQn);
 8000a5c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fd4d 	bl	8000500 <__NVIC_EnableIRQ>

	/*CONFIGURE DMA TRANSFER*/
	LL_DMA_ConfigTransfer(	 DMAx, Stream,
 8000a66:	f44f 3201 	mov.w	r2, #132096	; 0x20400
 8000a6a:	6839      	ldr	r1, [r7, #0]
 8000a6c:	68b8      	ldr	r0, [r7, #8]
 8000a6e:	f7ff fe61 	bl	8000734 <LL_DMA_ConfigTransfer>
	  						 LL_DMA_MEMORY_INCREMENT			|
	  						 LL_DMA_PDATAALIGN_BYTE				|
	  						 LL_DMA_MDATAALIGN_BYTE				);

	/*Configure transfer address and direction*/
	LL_DMA_ConfigAddresses(	 DMAx,
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f7ff fe1a 	bl	80006ac <LL_USART_DMA_GetRegAddr>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	9100      	str	r1, [sp, #0]
 8000a80:	6839      	ldr	r1, [r7, #0]
 8000a82:	68b8      	ldr	r0, [r7, #8]
 8000a84:	f7ff feb6 	bl	80007f4 <LL_DMA_ConfigAddresses>
							 LL_USART_DMA_GetRegAddr(USARTx),
	  		  	  	  	  	 (uint32_t)DstAddress,
							 LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	/* Set data lenght */
	LL_DMA_SetDataLength(DMAx, Stream, Rx_Buffer_Size);
 8000a88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	6839      	ldr	r1, [r7, #0]
 8000a90:	68b8      	ldr	r0, [r7, #8]
 8000a92:	f7ff fe75 	bl	8000780 <LL_DMA_SetDataLength>

	/* Enable DMA Complate, IDLE and Error Interrupt. */
	LL_DMA_EnableIT_TC(DMAx, Stream);
 8000a96:	6839      	ldr	r1, [r7, #0]
 8000a98:	68b8      	ldr	r0, [r7, #8]
 8000a9a:	f7ff ff8f 	bl	80009bc <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMAx, Stream);
 8000a9e:	6839      	ldr	r1, [r7, #0]
 8000aa0:	68b8      	ldr	r0, [r7, #8]
 8000aa2:	f7ff ff6b 	bl	800097c <LL_DMA_EnableIT_TE>
	/* Disable Half Transfer Complate Interrupt*/
	LL_DMA_DisableIT_HT(DMAx, Stream);
 8000aa6:	6839      	ldr	r1, [r7, #0]
 8000aa8:	68b8      	ldr	r0, [r7, #8]
 8000aaa:	f7ff ffa7 	bl	80009fc <LL_DMA_DisableIT_HT>

	/* Enable to UART IDLE*/
	LL_USART_EnableIT_IDLE(USARTx);
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fd93 	bl	80005da <LL_USART_EnableIT_IDLE>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Low_Level_UART_DMA_TX_Config>:
 * @Function_Brief  : Config function for LL Uart Tx. Use this function in the
 * 					  MX_USART2_UART_Init() or use after UART and DMA Init func.
 ******************************************************************************/

void Low_Level_UART_DMA_TX_Config(USART_TypeDef *USARTx ,DMA_TypeDef *DMAx, uint32_t Periphs ,
		uint32_t Stream, IRQn_Type IRQn, uint8_t SourceAddress[], uint8_t Tx_Buffer_Size) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]


	  LL_AHB1_GRP1_EnableClock(Periphs);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fdfa 	bl	80006c4 <LL_AHB1_GRP1_EnableClock>

	  /*ENABLE DMA NVIC PRIOTIRY*/

	  NVIC_SetPriority(IRQn, 0);
 8000ad0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fd30 	bl	800053c <__NVIC_SetPriority>

	  /*ENABLE DMA NVIC IRQN*/

	  NVIC_EnableIRQ(IRQn);
 8000adc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd0d 	bl	8000500 <__NVIC_EnableIRQ>

	  /*CONFIGURE DMA TRANSFER*/
	  LL_DMA_ConfigTransfer(DMAx, Stream,
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <Low_Level_UART_DMA_TX_Config+0x7c>)
 8000ae8:	6839      	ldr	r1, [r7, #0]
 8000aea:	68b8      	ldr	r0, [r7, #8]
 8000aec:	f7ff fe22 	bl	8000734 <LL_DMA_ConfigTransfer>
							 LL_DMA_PDATAALIGN_BYTE				|
							 LL_DMA_MDATAALIGN_BYTE				);

	  /*Configure transfer address and direction*/

	  LL_DMA_ConfigAddresses(DMAx,
 8000af0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff fdda 	bl	80006ac <LL_USART_DMA_GetRegAddr>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	9200      	str	r2, [sp, #0]
 8000afe:	4622      	mov	r2, r4
 8000b00:	6839      	ldr	r1, [r7, #0]
 8000b02:	68b8      	ldr	r0, [r7, #8]
 8000b04:	f7ff fe76 	bl	80007f4 <LL_DMA_ConfigAddresses>
							 LL_USART_DMA_GetRegAddr(USARTx) ,
							 LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	  /* Set data lenght */

	  LL_DMA_SetDataLength(DMAx, Stream, Tx_Buffer_Size);
 8000b08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	6839      	ldr	r1, [r7, #0]
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f7ff fe35 	bl	8000780 <LL_DMA_SetDataLength>


	  LL_DMA_EnableIT_TC(DMAx, Stream);
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	68b8      	ldr	r0, [r7, #8]
 8000b1a:	f7ff ff4f 	bl	80009bc <LL_DMA_EnableIT_TC>
	  LL_DMA_EnableIT_TE(DMAx, Stream);
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	68b8      	ldr	r0, [r7, #8]
 8000b22:	f7ff ff2b 	bl	800097c <LL_DMA_EnableIT_TE>
	  LL_DMA_DisableIT_HT(DMAx, Stream);
 8000b26:	6839      	ldr	r1, [r7, #0]
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f7ff ff67 	bl	80009fc <LL_DMA_DisableIT_HT>

}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	00020440 	.word	0x00020440

08000b3c <Low_Level_UART_DMA_RX_Start>:
 * @Function_Input  : USARTx, DMAx, Stream
 * @Function_Output : None
 * @Function_Brief  : Start func. Uart Rx LL
 ******************************************************************************/

void Low_Level_UART_DMA_RX_Start(USART_TypeDef *USARTx, DMA_TypeDef *DMAx, uint32_t Stream){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]

	LL_USART_EnableDMAReq_RX(USARTx);
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff fd69 	bl	8000620 <LL_USART_EnableDMAReq_RX>
	LL_DMA_EnableStream(DMAx, Stream);
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	68b8      	ldr	r0, [r7, #8]
 8000b52:	f7ff fdcf 	bl	80006f4 <LL_DMA_EnableStream>
	LL_DMA_EnableIT_TC(DMAx, Stream);
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f7ff ff2f 	bl	80009bc <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMAx, Stream);
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	68b8      	ldr	r0, [r7, #8]
 8000b62:	f7ff ff0b 	bl	800097c <LL_DMA_EnableIT_TE>

}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <Low_Level_UART_DMA_TX_Start>:
 * @Function_Input  : USARTx, DMAx, Stream
 * @Function_Output : None
 * @Function_Brief  : Start func. Uart Rx LL
 ******************************************************************************/

void Low_Level_UART_DMA_TX_Start(USART_TypeDef *USARTx, DMA_TypeDef *DMAx, uint32_t Stream){
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]

	LL_USART_EnableDMAReq_TX(USARTx);
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff fd73 	bl	8000666 <LL_USART_EnableDMAReq_TX>
	LL_DMA_EnableStream(DMAx, Stream);
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	68b8      	ldr	r0, [r7, #8]
 8000b84:	f7ff fdb6 	bl	80006f4 <LL_DMA_EnableStream>

}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <Low_Level_UART_DMA_RX_Interrupt>:
 * @Function_Input  : DMAx
 * @Function_Output : None
 * @Function_Brief  : DMA RX Interrupt func.
 ******************************************************************************/

void Low_Level_UART_DMA_RX_Interrupt(DMA_TypeDef *DMAx){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

	if(LL_DMA_IsActiveFlag_TC5(DMAx)){ // User should change LL_DMA_IsActiveFlag_TCx with the correct stream.
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fe67 	bl	800086c <LL_DMA_IsActiveFlag_TC5>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d006      	beq.n	8000bb2 <Low_Level_UART_DMA_RX_Interrupt+0x22>

			LL_DMA_ClearFlag_TC5(DMAx);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff feb1 	bl	800090c <LL_DMA_ClearFlag_TC5>

			Rx_Cmplt = 1;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <Low_Level_UART_DMA_RX_Interrupt+0x44>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]

			LL_DMA_ClearFlag_TE5(DMAx);
			Rx_Error = 1;
	}

}
 8000bb0:	e00b      	b.n	8000bca <Low_Level_UART_DMA_RX_Interrupt+0x3a>
	else if(LL_DMA_IsActiveFlag_TE5(DMAx)){ // User should change LL_DMA_IsActiveFlag_TEx with the correct stream.
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fe82 	bl	80008bc <LL_DMA_IsActiveFlag_TE5>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <Low_Level_UART_DMA_RX_Interrupt+0x3a>
			LL_DMA_ClearFlag_TE5(DMAx);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fec0 	bl	8000944 <LL_DMA_ClearFlag_TE5>
			Rx_Error = 1;
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <Low_Level_UART_DMA_RX_Interrupt+0x48>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000b1 	.word	0x200000b1
 8000bd8:	200000b0 	.word	0x200000b0

08000bdc <Low_Level_UART_DMA_TX_Interrupt>:
 * @Function_Input  : DMAx
 * @Function_Output : None
 * @Function_Brief  : DMA TX Interrupt func.
 ******************************************************************************/

void Low_Level_UART_DMA_TX_Interrupt(DMA_TypeDef *DMAx){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

	if(LL_DMA_IsActiveFlag_TC6(DMAx)){ // The user should change LL_DMA_IsActiveFlag_TCx with the correct stream.
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fe55 	bl	8000894 <LL_DMA_IsActiveFlag_TC6>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <Low_Level_UART_DMA_TX_Interrupt+0x22>

		LL_DMA_ClearFlag_TC6(DMAx);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fe99 	bl	8000928 <LL_DMA_ClearFlag_TC6>

		Tx_Cmplt = 1;
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <Low_Level_UART_DMA_TX_Interrupt+0x44>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
		LL_DMA_ClearFlag_TE6(DMAx);

		Tx_Error = 1;
	}

}
 8000bfc:	e00b      	b.n	8000c16 <Low_Level_UART_DMA_TX_Interrupt+0x3a>
	else if(LL_DMA_IsActiveFlag_TE6(DMAx)){ // User should change LL_DMA_IsActiveFlag_TEx with the correct stream.
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fe70 	bl	80008e4 <LL_DMA_IsActiveFlag_TE6>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <Low_Level_UART_DMA_TX_Interrupt+0x3a>
		LL_DMA_ClearFlag_TE6(DMAx);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fea8 	bl	8000960 <LL_DMA_ClearFlag_TE6>
		Tx_Error = 1;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <Low_Level_UART_DMA_TX_Interrupt+0x48>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000600 	.word	0x20000600
 8000c24:	20000601 	.word	0x20000601

08000c28 <Low_Level_UART_DMA_RX_IDLE_Interrupt>:
 * @Function_Output : None
 * @Function_Brief  : IDLE Interrupt func.
 ******************************************************************************/

void Low_Level_UART_DMA_RX_IDLE_Interrupt(USART_TypeDef *USARTx, DMA_TypeDef *DMAx, uint32_t Stream,
		uint8_t Recieved_Data[], uint8_t Rx_Buffer[]){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]

	if(LL_USART_IsActiveFlag_IDLE(USARTx))
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f7ff fcaa 	bl	8000590 <LL_USART_IsActiveFlag_IDLE>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 80a7 	beq.w	8000d92 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x16a>
	{

		for(uint8_t i=0; i<Rx_Buffer_Size; i++) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	77fb      	strb	r3, [r7, #31]
 8000c48:	e007      	b.n	8000c5a <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x32>
			Recieved_Data[i] = 0;	// Reset to Recieved_Data
 8000c4a:	7ffb      	ldrb	r3, [r7, #31]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<Rx_Buffer_Size; i++) {
 8000c54:	7ffb      	ldrb	r3, [r7, #31]
 8000c56:	3301      	adds	r3, #1
 8000c58:	77fb      	strb	r3, [r7, #31]
 8000c5a:	7ffb      	ldrb	r3, [r7, #31]
 8000c5c:	2b63      	cmp	r3, #99	; 0x63
 8000c5e:	d9f4      	bls.n	8000c4a <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x22>
		}

		LL_USART_ClearFlag_IDLE(USARTx); // Clear flag
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f7ff fca8 	bl	80005b6 <LL_USART_ClearFlag_IDLE>

		Pos = Rx_Buffer_Size - LL_DMA_GetDataLength(DMAx, Stream);
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	68b8      	ldr	r0, [r7, #8]
 8000c6a:	f7ff fdad 	bl	80007c8 <LL_DMA_GetDataLength>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x174>)
 8000c7a:	701a      	strb	r2, [r3, #0]


		if(Pos == Old_Pos) { // Data Size = Rx_Buffer_Size
 8000c7c:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x174>)
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x178>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d12d      	bne.n	8000ce4 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0xbc>
			uint8_t a = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	77bb      	strb	r3, [r7, #30]
			for(uint8_t i=Pos; i<Rx_Buffer_Size; i++){
 8000c8c:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x174>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	777b      	strb	r3, [r7, #29]
 8000c92:	e00d      	b.n	8000cb0 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x88>

				Recieved_Data[a] = Rx_Buffer[i];
 8000c94:	7f7b      	ldrb	r3, [r7, #29]
 8000c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c98:	441a      	add	r2, r3
 8000c9a:	7fbb      	ldrb	r3, [r7, #30]
 8000c9c:	6839      	ldr	r1, [r7, #0]
 8000c9e:	440b      	add	r3, r1
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	701a      	strb	r2, [r3, #0]
				a++;
 8000ca4:	7fbb      	ldrb	r3, [r7, #30]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	77bb      	strb	r3, [r7, #30]
			for(uint8_t i=Pos; i<Rx_Buffer_Size; i++){
 8000caa:	7f7b      	ldrb	r3, [r7, #29]
 8000cac:	3301      	adds	r3, #1
 8000cae:	777b      	strb	r3, [r7, #29]
 8000cb0:	7f7b      	ldrb	r3, [r7, #29]
 8000cb2:	2b63      	cmp	r3, #99	; 0x63
 8000cb4:	d9ee      	bls.n	8000c94 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x6c>
			}

			for(uint8_t i = 0; i<Old_Pos; i++){
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	773b      	strb	r3, [r7, #28]
 8000cba:	e00d      	b.n	8000cd8 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0xb0>
				Recieved_Data[a] = Rx_Buffer[i];
 8000cbc:	7f3b      	ldrb	r3, [r7, #28]
 8000cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cc0:	441a      	add	r2, r3
 8000cc2:	7fbb      	ldrb	r3, [r7, #30]
 8000cc4:	6839      	ldr	r1, [r7, #0]
 8000cc6:	440b      	add	r3, r1
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	701a      	strb	r2, [r3, #0]
				a++;
 8000ccc:	7fbb      	ldrb	r3, [r7, #30]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	77bb      	strb	r3, [r7, #30]
			for(uint8_t i = 0; i<Old_Pos; i++){
 8000cd2:	7f3b      	ldrb	r3, [r7, #28]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	773b      	strb	r3, [r7, #28]
 8000cd8:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x178>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	7f3a      	ldrb	r2, [r7, #28]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3ec      	bcc.n	8000cbc <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x94>
 8000ce2:	e052      	b.n	8000d8a <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x162>
			}
		}

		else if (Pos != Old_Pos){
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x174>)
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x178>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d04c      	beq.n	8000d8a <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x162>

			if(Pos > Old_Pos){
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x174>)
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x178>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d919      	bls.n	8000d30 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x108>
				//        * [   4   ]            |                                    				 |
				//        * [   5   ]            |---------------------------------------------------|
				//        * [   6   ] <- pos
				//        * [   7   ]
				//        * [ N - 1 ]
				uint8_t a = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	76fb      	strb	r3, [r7, #27]
				for(uint8_t i=Old_Pos; i<Pos; i++){
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x178>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	76bb      	strb	r3, [r7, #26]
 8000d06:	e00d      	b.n	8000d24 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0xfc>

					Recieved_Data[0+a] = Rx_Buffer[i];
 8000d08:	7ebb      	ldrb	r3, [r7, #26]
 8000d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d0c:	441a      	add	r2, r3
 8000d0e:	7efb      	ldrb	r3, [r7, #27]
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	440b      	add	r3, r1
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	701a      	strb	r2, [r3, #0]
					a++;
 8000d18:	7efb      	ldrb	r3, [r7, #27]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	76fb      	strb	r3, [r7, #27]
				for(uint8_t i=Old_Pos; i<Pos; i++){
 8000d1e:	7ebb      	ldrb	r3, [r7, #26]
 8000d20:	3301      	adds	r3, #1
 8000d22:	76bb      	strb	r3, [r7, #26]
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x174>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	7eba      	ldrb	r2, [r7, #26]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3ec      	bcc.n	8000d08 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0xe0>
 8000d2e:	e02c      	b.n	8000d8a <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x162>
				//		             * [   7   ]            |                                 |
				//		             * [ N - 1 ]            |---------------------------------|
				//						DATA = FIRST BLOCK + SECOND BLOCK
//				uint8_t First_Block = Rx_Buffer_Size - Old_Pos;
//				uint8_t Second_Block = Pos;
				uint8_t Last_Position =0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	767b      	strb	r3, [r7, #25]

				for(uint8_t i = Old_Pos; i<Rx_Buffer_Size; i++){ // first block copy to Recieved_Data
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x178>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	763b      	strb	r3, [r7, #24]
 8000d3a:	e00d      	b.n	8000d58 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x130>
					Recieved_Data[Last_Position] = Rx_Buffer[i];
 8000d3c:	7e3b      	ldrb	r3, [r7, #24]
 8000d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d40:	441a      	add	r2, r3
 8000d42:	7e7b      	ldrb	r3, [r7, #25]
 8000d44:	6839      	ldr	r1, [r7, #0]
 8000d46:	440b      	add	r3, r1
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	701a      	strb	r2, [r3, #0]
					Last_Position++;
 8000d4c:	7e7b      	ldrb	r3, [r7, #25]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	767b      	strb	r3, [r7, #25]
				for(uint8_t i = Old_Pos; i<Rx_Buffer_Size; i++){ // first block copy to Recieved_Data
 8000d52:	7e3b      	ldrb	r3, [r7, #24]
 8000d54:	3301      	adds	r3, #1
 8000d56:	763b      	strb	r3, [r7, #24]
 8000d58:	7e3b      	ldrb	r3, [r7, #24]
 8000d5a:	2b63      	cmp	r3, #99	; 0x63
 8000d5c:	d9ee      	bls.n	8000d3c <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x114>
				}

				for(uint8_t i = 0; i < Pos; i++){ // second block copy to Recieved_Data
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75fb      	strb	r3, [r7, #23]
 8000d62:	e00d      	b.n	8000d80 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x158>

					Recieved_Data[Last_Position] = Rx_Buffer[i];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d68:	441a      	add	r2, r3
 8000d6a:	7e7b      	ldrb	r3, [r7, #25]
 8000d6c:	6839      	ldr	r1, [r7, #0]
 8000d6e:	440b      	add	r3, r1
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	701a      	strb	r2, [r3, #0]
					Last_Position++;
 8000d74:	7e7b      	ldrb	r3, [r7, #25]
 8000d76:	3301      	adds	r3, #1
 8000d78:	767b      	strb	r3, [r7, #25]
				for(uint8_t i = 0; i < Pos; i++){ // second block copy to Recieved_Data
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	75fb      	strb	r3, [r7, #23]
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x174>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	7dfa      	ldrb	r2, [r7, #23]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x13c>
				}
			}
		}

		Old_Pos = Pos;
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x174>)
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <Low_Level_UART_DMA_RX_IDLE_Interrupt+0x178>)
 8000d90:	701a      	strb	r2, [r3, #0]
	}

}
 8000d92:	bf00      	nop
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000118 	.word	0x20000118
 8000da0:	20000119 	.word	0x20000119

08000da4 <__NVIC_GetPriorityGrouping>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_USART_Enable>:
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60da      	str	r2, [r3, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_USART_ConfigAsyncMode>:
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	615a      	str	r2, [r3, #20]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <LL_AHB1_GRP1_EnableClock>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40023800 	.word	0x40023800

08000f34 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40023800 	.word	0x40023800

08000f64 <LL_DMA_SetDataTransferDirection>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <LL_DMA_SetDataTransferDirection+0x44>)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000f84:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <LL_DMA_SetDataTransferDirection+0x44>)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	440b      	add	r3, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	440b      	add	r3, r1
 8000f92:	4619      	mov	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	08004748 	.word	0x08004748

08000fac <LL_DMA_SetMode>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <LL_DMA_SetMode+0x44>)
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000fcc:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <LL_DMA_SetMode+0x44>)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	440b      	add	r3, r1
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	440b      	add	r3, r1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	08004748 	.word	0x08004748

08000ff4 <LL_DMA_SetPeriphIncMode>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LL_DMA_SetPeriphIncMode+0x44>)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <LL_DMA_SetPeriphIncMode+0x44>)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	440b      	add	r3, r1
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	440b      	add	r3, r1
 8001022:	4619      	mov	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	08004748 	.word	0x08004748

0800103c <LL_DMA_SetMemoryIncMode>:
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LL_DMA_SetMemoryIncMode+0x44>)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800105c:	4908      	ldr	r1, [pc, #32]	; (8001080 <LL_DMA_SetMemoryIncMode+0x44>)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	440b      	add	r3, r1
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	440b      	add	r3, r1
 800106a:	4619      	mov	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4313      	orrs	r3, r2
 8001070:	600b      	str	r3, [r1, #0]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	08004748 	.word	0x08004748

08001084 <LL_DMA_SetPeriphSize>:
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <LL_DMA_SetPeriphSize+0x44>)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80010a4:	4908      	ldr	r1, [pc, #32]	; (80010c8 <LL_DMA_SetPeriphSize+0x44>)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	440b      	add	r3, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	440b      	add	r3, r1
 80010b2:	4619      	mov	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	08004748 	.word	0x08004748

080010cc <LL_DMA_SetMemorySize>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LL_DMA_SetMemorySize+0x44>)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80010ec:	4908      	ldr	r1, [pc, #32]	; (8001110 <LL_DMA_SetMemorySize+0x44>)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	440b      	add	r3, r1
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	440b      	add	r3, r1
 80010fa:	4619      	mov	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	08004748 	.word	0x08004748

08001114 <LL_DMA_SetStreamPriorityLevel>:
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001134:	4908      	ldr	r1, [pc, #32]	; (8001158 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	440b      	add	r3, r1
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	440b      	add	r3, r1
 8001142:	4619      	mov	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	08004748 	.word	0x08004748

0800115c <LL_DMA_SetChannelSelection>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <LL_DMA_SetChannelSelection+0x44>)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800117c:	4908      	ldr	r1, [pc, #32]	; (80011a0 <LL_DMA_SetChannelSelection+0x44>)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	440b      	add	r3, r1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	440b      	add	r3, r1
 800118a:	4619      	mov	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	08004748 	.word	0x08004748

080011a4 <LL_DMA_DisableFifoMode>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80011ae:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <LL_DMA_DisableFifoMode+0x3c>)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <LL_DMA_DisableFifoMode+0x3c>)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	440a      	add	r2, r1
 80011c4:	7812      	ldrb	r2, [r2, #0]
 80011c6:	4611      	mov	r1, r2
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	440a      	add	r2, r1
 80011cc:	f023 0304 	bic.w	r3, r3, #4
 80011d0:	6153      	str	r3, [r2, #20]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	08004748 	.word	0x08004748

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f000 fc09 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 f841 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f2:	f000 fa23 	bl	800163c <MX_GPIO_Init>
  MX_DMA_Init();
 80011f6:	f000 f9e9 	bl	80015cc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011fa:	f000 f967 	bl	80014cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011fe:	f000 f9b7 	bl	8001570 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8001202:	f000 f8a3 	bl	800134c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Low_Level_UART_DMA_RX_Config(USART2, DMA1, LL_AHB1_GRP1_PERIPH_DMA1, LL_DMA_STREAM_5,
 8001206:	2364      	movs	r3, #100	; 0x64
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <main+0x80>)
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	2310      	movs	r3, #16
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2305      	movs	r3, #5
 8001214:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001218:	4913      	ldr	r1, [pc, #76]	; (8001268 <main+0x84>)
 800121a:	4814      	ldr	r0, [pc, #80]	; (800126c <main+0x88>)
 800121c:	f7ff fc0e 	bl	8000a3c <Low_Level_UART_DMA_RX_Config>
		  DMA1_Stream5_IRQn, Rx_Buffer, sizeof(Rx_Buffer));

  Low_Level_UART_DMA_TX_Config(USART2, DMA1, LL_AHB1_GRP1_PERIPH_DMA1, LL_DMA_STREAM_6,
 8001220:	2324      	movs	r3, #36	; 0x24
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <main+0x8c>)
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2311      	movs	r3, #17
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2306      	movs	r3, #6
 800122e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001232:	490d      	ldr	r1, [pc, #52]	; (8001268 <main+0x84>)
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <main+0x88>)
 8001236:	f7ff fc41 	bl	8000abc <Low_Level_UART_DMA_TX_Config>
  		  DMA1_Stream6_IRQn, Tx_Buffer, sizeof(Tx_Buffer));

  Low_Level_UART_DMA_RX_Start(USART2, DMA1, LL_DMA_STREAM_5);
 800123a:	2205      	movs	r2, #5
 800123c:	490a      	ldr	r1, [pc, #40]	; (8001268 <main+0x84>)
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <main+0x88>)
 8001240:	f7ff fc7c 	bl	8000b3c <Low_Level_UART_DMA_RX_Start>

  Low_Level_UART_DMA_TX_Start(USART2, DMA1, LL_DMA_STREAM_6);
 8001244:	2206      	movs	r2, #6
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <main+0x84>)
 8001248:	4808      	ldr	r0, [pc, #32]	; (800126c <main+0x88>)
 800124a:	f7ff fc90 	bl	8000b6e <Low_Level_UART_DMA_TX_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  LL_UART_DMA_RX_Stop(USART2, DMA1, LL_DMA_STREAM_5);
	  Low_Level_UART_DMA_TX_Start(USART2, DMA1, LL_DMA_STREAM_6);
 800124e:	2206      	movs	r2, #6
 8001250:	4905      	ldr	r1, [pc, #20]	; (8001268 <main+0x84>)
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <main+0x88>)
 8001254:	f7ff fc8b 	bl	8000b6e <Low_Level_UART_DMA_TX_Start>
	  HAL_Delay(1000);
 8001258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125c:	f000 fc42 	bl	8001ae4 <HAL_Delay>
	  Low_Level_UART_DMA_TX_Start(USART2, DMA1, LL_DMA_STREAM_6);
 8001260:	e7f5      	b.n	800124e <main+0x6a>
 8001262:	bf00      	nop
 8001264:	2000004c 	.word	0x2000004c
 8001268:	40026000 	.word	0x40026000
 800126c:	40004400 	.word	0x40004400
 8001270:	20000000 	.word	0x20000000

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	; 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	2234      	movs	r2, #52	; 0x34
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fa23 	bl	80046ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <SystemClock_Config+0xd0>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a28      	ldr	r2, [pc, #160]	; (8001344 <SystemClock_Config+0xd0>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <SystemClock_Config+0xd0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <SystemClock_Config+0xd4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a22      	ldr	r2, [pc, #136]	; (8001348 <SystemClock_Config+0xd4>)
 80012be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <SystemClock_Config+0xd4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2302      	movs	r3, #2
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012e8:	23a8      	movs	r3, #168	; 0xa8
 80012ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012f0:	2307      	movs	r3, #7
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fe23 	bl	8002f48 <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001308:	f000 fa46 	bl	8001798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2302      	movs	r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001318:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800131c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2105      	movs	r1, #5
 800132a:	4618      	mov	r0, r3
 800132c:	f000 ffcc 	bl	80022c8 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001336:	f000 fa2f 	bl	8001798 <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	3750      	adds	r7, #80	; 0x50
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
 8001374:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001376:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800137a:	f7ff fddb 	bl	8000f34 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff fdc0 	bl	8000f04 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001384:	230c      	movs	r3, #12
 8001386:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001388:	2302      	movs	r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001398:	2307      	movs	r3, #7
 800139a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4847      	ldr	r0, [pc, #284]	; (80014c0 <MX_USART2_UART_Init+0x174>)
 80013a2:	f002 f9ba 	bl	800371a <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 80013a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013aa:	2105      	movs	r1, #5
 80013ac:	4845      	ldr	r0, [pc, #276]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 80013ae:	f7ff fed5 	bl	800115c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2105      	movs	r1, #5
 80013b6:	4843      	ldr	r0, [pc, #268]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 80013b8:	f7ff fdd4 	bl	8000f64 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_HIGH);
 80013bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013c0:	2105      	movs	r1, #5
 80013c2:	4840      	ldr	r0, [pc, #256]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 80013c4:	f7ff fea6 	bl	8001114 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2105      	movs	r1, #5
 80013cc:	483d      	ldr	r0, [pc, #244]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 80013ce:	f7ff fded 	bl	8000fac <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	483b      	ldr	r0, [pc, #236]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 80013d8:	f7ff fe0c 	bl	8000ff4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 80013dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e0:	2105      	movs	r1, #5
 80013e2:	4838      	ldr	r0, [pc, #224]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 80013e4:	f7ff fe2a 	bl	800103c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2105      	movs	r1, #5
 80013ec:	4835      	ldr	r0, [pc, #212]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 80013ee:	f7ff fe49 	bl	8001084 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	4833      	ldr	r0, [pc, #204]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 80013f8:	f7ff fe68 	bl	80010cc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 80013fc:	2105      	movs	r1, #5
 80013fe:	4831      	ldr	r0, [pc, #196]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 8001400:	f7ff fed0 	bl	80011a4 <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8001404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001408:	2106      	movs	r1, #6
 800140a:	482e      	ldr	r0, [pc, #184]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 800140c:	f7ff fea6 	bl	800115c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001410:	2240      	movs	r2, #64	; 0x40
 8001412:	2106      	movs	r1, #6
 8001414:	482b      	ldr	r0, [pc, #172]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 8001416:	f7ff fda5 	bl	8000f64 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_HIGH);
 800141a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800141e:	2106      	movs	r1, #6
 8001420:	4828      	ldr	r0, [pc, #160]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 8001422:	f7ff fe77 	bl	8001114 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8001426:	2200      	movs	r2, #0
 8001428:	2106      	movs	r1, #6
 800142a:	4826      	ldr	r0, [pc, #152]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 800142c:	f7ff fdbe 	bl	8000fac <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8001430:	2200      	movs	r2, #0
 8001432:	2106      	movs	r1, #6
 8001434:	4823      	ldr	r0, [pc, #140]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 8001436:	f7ff fddd 	bl	8000ff4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 800143a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143e:	2106      	movs	r1, #6
 8001440:	4820      	ldr	r0, [pc, #128]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 8001442:	f7ff fdfb 	bl	800103c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8001446:	2200      	movs	r2, #0
 8001448:	2106      	movs	r1, #6
 800144a:	481e      	ldr	r0, [pc, #120]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 800144c:	f7ff fe1a 	bl	8001084 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8001450:	2200      	movs	r2, #0
 8001452:	2106      	movs	r1, #6
 8001454:	481b      	ldr	r0, [pc, #108]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 8001456:	f7ff fe39 	bl	80010cc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 800145a:	2106      	movs	r1, #6
 800145c:	4819      	ldr	r0, [pc, #100]	; (80014c4 <MX_USART2_UART_Init+0x178>)
 800145e:	f7ff fea1 	bl	80011a4 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001462:	f7ff fc9f 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8001466:	4603      	mov	r3, r0
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fcef 	bl	8000e50 <NVIC_EncodePriority>
 8001472:	4603      	mov	r3, r0
 8001474:	4619      	mov	r1, r3
 8001476:	2026      	movs	r0, #38	; 0x26
 8001478:	f7ff fcc0 	bl	8000dfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800147c:	2026      	movs	r0, #38	; 0x26
 800147e:	f7ff fc9f 	bl	8000dc0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */


  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001482:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001486:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001494:	230c      	movs	r3, #12
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001498:	2300      	movs	r3, #0
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800149c:	2300      	movs	r3, #0
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4808      	ldr	r0, [pc, #32]	; (80014c8 <MX_USART2_UART_Init+0x17c>)
 80014a8:	f002 fd98 	bl	8003fdc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80014ac:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_USART2_UART_Init+0x17c>)
 80014ae:	f7ff fd12 	bl	8000ed6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART2_UART_Init+0x17c>)
 80014b4:	f7ff fcff 	bl	8000eb6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3738      	adds	r7, #56	; 0x38
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40026000 	.word	0x40026000
 80014c8:	40004400 	.word	0x40004400

080014cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80014f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014fa:	f7ff fd1b 	bl	8000f34 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80014fe:	2008      	movs	r0, #8
 8001500:	f7ff fd00 	bl	8000f04 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001508:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800150a:	2302      	movs	r3, #2
 800150c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800151a:	2307      	movs	r3, #7
 800151c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4811      	ldr	r0, [pc, #68]	; (8001568 <MX_USART3_UART_Init+0x9c>)
 8001524:	f002 f8f9 	bl	800371a <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001528:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800152c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800153a:	230c      	movs	r3, #12
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001542:	2300      	movs	r3, #0
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_USART3_UART_Init+0xa0>)
 800154e:	f002 fd45 	bl	8003fdc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_USART3_UART_Init+0xa0>)
 8001554:	f7ff fcbf 	bl	8000ed6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_USART3_UART_Init+0xa0>)
 800155a:	f7ff fcac 	bl	8000eb6 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3738      	adds	r7, #56	; 0x38
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40004800 	.word	0x40004800

08001570 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800157a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157e:	2206      	movs	r2, #6
 8001580:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001584:	2202      	movs	r2, #2
 8001586:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001590:	2202      	movs	r2, #2
 8001592:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001596:	2201      	movs	r2, #1
 8001598:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b4:	f000 fd4d 	bl	8002052 <HAL_PCD_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015be:	f000 f8eb 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000011c 	.word	0x2000011c

080015cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_DMA_Init+0x6c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a17      	ldr	r2, [pc, #92]	; (8001638 <MX_DMA_Init+0x6c>)
 80015dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <MX_DMA_Init+0x6c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015ee:	f7ff fbd9 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fc29 	bl	8000e50 <NVIC_EncodePriority>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	2010      	movs	r0, #16
 8001604:	f7ff fbfa 	bl	8000dfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001608:	2010      	movs	r0, #16
 800160a:	f7ff fbd9 	bl	8000dc0 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800160e:	f7ff fbc9 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8001612:	4603      	mov	r3, r0
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fc19 	bl	8000e50 <NVIC_EncodePriority>
 800161e:	4603      	mov	r3, r0
 8001620:	4619      	mov	r1, r3
 8001622:	2011      	movs	r0, #17
 8001624:	f7ff fbea 	bl	8000dfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001628:	2011      	movs	r0, #17
 800162a:	f7ff fbc9 	bl	8000dc0 <__NVIC_EnableIRQ>

}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	4b4c      	ldr	r3, [pc, #304]	; (8001788 <MX_GPIO_Init+0x14c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a4b      	ldr	r2, [pc, #300]	; (8001788 <MX_GPIO_Init+0x14c>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b49      	ldr	r3, [pc, #292]	; (8001788 <MX_GPIO_Init+0x14c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	4b45      	ldr	r3, [pc, #276]	; (8001788 <MX_GPIO_Init+0x14c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a44      	ldr	r2, [pc, #272]	; (8001788 <MX_GPIO_Init+0x14c>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b42      	ldr	r3, [pc, #264]	; (8001788 <MX_GPIO_Init+0x14c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <MX_GPIO_Init+0x14c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a3d      	ldr	r2, [pc, #244]	; (8001788 <MX_GPIO_Init+0x14c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <MX_GPIO_Init+0x14c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <MX_GPIO_Init+0x14c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a36      	ldr	r2, [pc, #216]	; (8001788 <MX_GPIO_Init+0x14c>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <MX_GPIO_Init+0x14c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <MX_GPIO_Init+0x14c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <MX_GPIO_Init+0x14c>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <MX_GPIO_Init+0x14c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <MX_GPIO_Init+0x14c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a28      	ldr	r2, [pc, #160]	; (8001788 <MX_GPIO_Init+0x14c>)
 80016e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <MX_GPIO_Init+0x14c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8001700:	4822      	ldr	r0, [pc, #136]	; (800178c <MX_GPIO_Init+0x150>)
 8001702:	f000 fc8d 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2140      	movs	r1, #64	; 0x40
 800170a:	4821      	ldr	r0, [pc, #132]	; (8001790 <MX_GPIO_Init+0x154>)
 800170c:	f000 fc88 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001716:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	481b      	ldr	r0, [pc, #108]	; (8001794 <MX_GPIO_Init+0x158>)
 8001728:	f000 fae6 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800172c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	4811      	ldr	r0, [pc, #68]	; (800178c <MX_GPIO_Init+0x150>)
 8001746:	f000 fad7 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800174a:	2340      	movs	r3, #64	; 0x40
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4619      	mov	r1, r3
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <MX_GPIO_Init+0x154>)
 8001762:	f000 fac9 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_GPIO_Init+0x154>)
 800177a:	f000 fabd 	bl	8001cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800177e:	bf00      	nop
 8001780:	3730      	adds	r7, #48	; 0x30
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40020400 	.word	0x40020400
 8001790:	40021800 	.word	0x40021800
 8001794:	40020800 	.word	0x40020800

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>
	...

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0a0      	sub	sp, #128	; 0x80
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	225c      	movs	r2, #92	; 0x5c
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f002 ff5a 	bl	80046ce <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001822:	d14e      	bne.n	80018c2 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001828:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800182a:	2300      	movs	r3, #0
 800182c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fe2e 	bl	8002494 <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800183e:	f7ff ffab 	bl	8001798 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_PCD_MspInit+0xd8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a20      	ldr	r2, [pc, #128]	; (80018cc <HAL_PCD_MspInit+0xd8>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_PCD_MspInit+0xd8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800185e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001862:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001870:	230a      	movs	r3, #10
 8001872:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001878:	4619      	mov	r1, r3
 800187a:	4815      	ldr	r0, [pc, #84]	; (80018d0 <HAL_PCD_MspInit+0xdc>)
 800187c:	f000 fa3c 	bl	8001cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001884:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001886:	2300      	movs	r3, #0
 8001888:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001892:	4619      	mov	r1, r3
 8001894:	480e      	ldr	r0, [pc, #56]	; (80018d0 <HAL_PCD_MspInit+0xdc>)
 8001896:	f000 fa2f 	bl	8001cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_PCD_MspInit+0xd8>)
 800189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_PCD_MspInit+0xd8>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6353      	str	r3, [r2, #52]	; 0x34
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_PCD_MspInit+0xd8>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_PCD_MspInit+0xd8>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_PCD_MspInit+0xd8>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3780      	adds	r7, #128	; 0x80
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001920:	f000 f8c0 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	Low_Level_UART_DMA_RX_Interrupt(DMA1);
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <DMA1_Stream5_IRQHandler+0x18>)
 800192e:	f7ff f92f 	bl	8000b90 <Low_Level_UART_DMA_RX_Interrupt>
	Low_Level_UART_DMA_RX_Start(USART2, DMA1, LL_DMA_STREAM_5);
 8001932:	2205      	movs	r2, #5
 8001934:	4902      	ldr	r1, [pc, #8]	; (8001940 <DMA1_Stream5_IRQHandler+0x18>)
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <DMA1_Stream5_IRQHandler+0x1c>)
 8001938:	f7ff f900 	bl	8000b3c <Low_Level_UART_DMA_RX_Start>
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40026000 	.word	0x40026000
 8001944:	40004400 	.word	0x40004400

08001948 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	Low_Level_UART_DMA_TX_Interrupt(DMA1);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Stream6_IRQHandler+0x10>)
 800194e:	f7ff f945 	bl	8000bdc <Low_Level_UART_DMA_TX_Interrupt>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40026000 	.word	0x40026000

0800195c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART2_IRQn 0 */
	Low_Level_UART_DMA_RX_IDLE_Interrupt(USART2, DMA1, LL_DMA_STREAM_5, Recieved_Data, Rx_Buffer);
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <USART2_IRQHandler+0x1c>)
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <USART2_IRQHandler+0x20>)
 8001968:	2205      	movs	r2, #5
 800196a:	4905      	ldr	r1, [pc, #20]	; (8001980 <USART2_IRQHandler+0x24>)
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <USART2_IRQHandler+0x28>)
 800196e:	f7ff f95b 	bl	8000c28 <Low_Level_UART_DMA_RX_IDLE_Interrupt>
//	LL_UART_DMA_RX_Start(USART2, DMA1, LL_DMA_STREAM_5);
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000004c 	.word	0x2000004c
 800197c:	200000b4 	.word	0x200000b4
 8001980:	40026000 	.word	0x40026000
 8001984:	40004400 	.word	0x40004400

08001988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019b0:	f7ff ffea 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	; (80019f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019da:	f002 fe81 	bl	80046e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019de:	f7ff fc01 	bl	80011e4 <main>
  bx  lr    
 80019e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80019f0:	08004778 	.word	0x08004778
  ldr r2, =_sbss
 80019f4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80019f8:	20000608 	.word	0x20000608

080019fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_Init+0x40>)
 8001a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_Init+0x40>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_Init+0x40>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 f931 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 f808 	bl	8001a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a34:	f7ff feb6 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x54>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x58>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f93b 	bl	8001cde <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d80a      	bhi.n	8001a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f000 f911 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_InitTick+0x5c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000024 	.word	0x20000024
 8001a9c:	2000002c 	.word	0x2000002c
 8001aa0:	20000028 	.word	0x20000028

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2000002c 	.word	0x2000002c
 8001ac8:	20000604 	.word	0x20000604

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000604 	.word	0x20000604

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000002c 	.word	0x2000002c

08001b2c <__NVIC_SetPriorityGrouping>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_SetPriority>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff8e 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff47 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff5c 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff8e 	bl	8001be4 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5d 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffb0 	bl	8001c4c <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e165      	b.n	8001fe0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	f040 8154 	bne.w	8001fda <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d005      	beq.n	8001d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d130      	bne.n	8001dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 0201 	and.w	r2, r3, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d017      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d123      	bne.n	8001e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	08da      	lsrs	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	08da      	lsrs	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3208      	adds	r2, #8
 8001e36:	69b9      	ldr	r1, [r7, #24]
 8001e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0203 	and.w	r2, r3, #3
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80ae 	beq.w	8001fda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_GPIO_Init+0x300>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a5c      	ldr	r2, [pc, #368]	; (8001ff8 <HAL_GPIO_Init+0x300>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <HAL_GPIO_Init+0x300>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9a:	4a58      	ldr	r2, [pc, #352]	; (8001ffc <HAL_GPIO_Init+0x304>)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4f      	ldr	r2, [pc, #316]	; (8002000 <HAL_GPIO_Init+0x308>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d025      	beq.n	8001f12 <HAL_GPIO_Init+0x21a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4e      	ldr	r2, [pc, #312]	; (8002004 <HAL_GPIO_Init+0x30c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01f      	beq.n	8001f0e <HAL_GPIO_Init+0x216>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <HAL_GPIO_Init+0x310>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d019      	beq.n	8001f0a <HAL_GPIO_Init+0x212>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_GPIO_Init+0x314>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0x20e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_GPIO_Init+0x318>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_GPIO_Init+0x20a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4a      	ldr	r2, [pc, #296]	; (8002014 <HAL_GPIO_Init+0x31c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0x206>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a49      	ldr	r2, [pc, #292]	; (8002018 <HAL_GPIO_Init+0x320>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x202>
 8001ef6:	2306      	movs	r3, #6
 8001ef8:	e00c      	b.n	8001f14 <HAL_GPIO_Init+0x21c>
 8001efa:	2307      	movs	r3, #7
 8001efc:	e00a      	b.n	8001f14 <HAL_GPIO_Init+0x21c>
 8001efe:	2305      	movs	r3, #5
 8001f00:	e008      	b.n	8001f14 <HAL_GPIO_Init+0x21c>
 8001f02:	2304      	movs	r3, #4
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x21c>
 8001f06:	2303      	movs	r3, #3
 8001f08:	e004      	b.n	8001f14 <HAL_GPIO_Init+0x21c>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_Init+0x21c>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x21c>
 8001f12:	2300      	movs	r3, #0
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	f002 0203 	and.w	r2, r2, #3
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4093      	lsls	r3, r2
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f24:	4935      	ldr	r1, [pc, #212]	; (8001ffc <HAL_GPIO_Init+0x304>)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_GPIO_Init+0x324>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f56:	4a31      	ldr	r2, [pc, #196]	; (800201c <HAL_GPIO_Init+0x324>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	; (800201c <HAL_GPIO_Init+0x324>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_GPIO_Init+0x324>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_GPIO_Init+0x324>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_GPIO_Init+0x324>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_GPIO_Init+0x324>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd4:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_GPIO_Init+0x324>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b0f      	cmp	r3, #15
 8001fe4:	f67f ae96 	bls.w	8001d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40013800 	.word	0x40013800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020400 	.word	0x40020400
 8002008:	40020800 	.word	0x40020800
 800200c:	40020c00 	.word	0x40020c00
 8002010:	40021000 	.word	0x40021000
 8002014:	40021400 	.word	0x40021400
 8002018:	40021800 	.word	0x40021800
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af02      	add	r7, sp, #8
 8002058:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e108      	b.n	8002276 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fbb8 	bl	80017f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002092:	d102      	bne.n	800209a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 f880 	bl	80041a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7c1a      	ldrb	r2, [r3, #16]
 80020ac:	f88d 2000 	strb.w	r2, [sp]
 80020b0:	3304      	adds	r3, #4
 80020b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b4:	f002 f812 	bl	80040dc <USB_CoreInit>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0d5      	b.n	8002276 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 f878 	bl	80041c6 <USB_SetCurrentMode>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0c6      	b.n	8002276 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e04a      	b.n	8002184 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3315      	adds	r3, #21
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3314      	adds	r3, #20
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	b298      	uxth	r0, r3
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	332e      	adds	r3, #46	; 0x2e
 800212a:	4602      	mov	r2, r0
 800212c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3318      	adds	r3, #24
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	331c      	adds	r3, #28
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3320      	adds	r3, #32
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3324      	adds	r3, #36	; 0x24
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	3301      	adds	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	791b      	ldrb	r3, [r3, #4]
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	429a      	cmp	r2, r3
 800218c:	d3af      	bcc.n	80020ee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e044      	b.n	800221e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	3301      	adds	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	791b      	ldrb	r3, [r3, #4]
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	429a      	cmp	r2, r3
 8002226:	d3b5      	bcc.n	8002194 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7c1a      	ldrb	r2, [r3, #16]
 8002230:	f88d 2000 	strb.w	r2, [sp]
 8002234:	3304      	adds	r3, #4
 8002236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002238:	f002 f812 	bl	8004260 <USB_DevInit>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2202      	movs	r2, #2
 8002246:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e013      	b.n	8002276 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7b1b      	ldrb	r3, [r3, #12]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d102      	bne.n	800226a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f80a 	bl	800227e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f002 f9cd 	bl	800460e <USB_DevDisconnect>

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b0:	f043 0303 	orr.w	r3, r3, #3
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0cc      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d90c      	bls.n	8002304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b65      	ldr	r3, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d044      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	2b03      	cmp	r3, #3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e067      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4934      	ldr	r1, [pc, #208]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b8:	f7ff fb88 	bl	8001acc <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7ff fb84 	bl	8001acc <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e04f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d20c      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244e:	f000 fb4b 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fae8 	bl	8001a44 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00
 8002484:	40023800 	.word	0x40023800
 8002488:	08004750 	.word	0x08004750
 800248c:	20000024 	.word	0x20000024
 8002490:	20000028 	.word	0x20000028

08002494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80024cc:	4b6f      	ldr	r3, [pc, #444]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	496c      	ldr	r1, [pc, #432]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80024ea:	2301      	movs	r3, #1
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80024fa:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002500:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	4960      	ldr	r1, [pc, #384]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002518:	2301      	movs	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d017      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002528:	4b58      	ldr	r3, [pc, #352]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800252a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4955      	ldr	r1, [pc, #340]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002546:	d101      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002548:	2301      	movs	r3, #1
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002554:	2301      	movs	r3, #1
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d017      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002564:	4b49      	ldr	r3, [pc, #292]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800256a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	4946      	ldr	r1, [pc, #280]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002582:	d101      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002584:	2301      	movs	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002590:	2301      	movs	r3, #1
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 808a 	beq.w	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b36      	ldr	r3, [pc, #216]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a33      	ldr	r2, [pc, #204]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025ca:	f7ff fa7f 	bl	8001acc <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025d2:	f7ff fa7b 	bl	8001acc <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e278      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025f0:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d02f      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	429a      	cmp	r2, r3
 800260c:	d028      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800260e:	4b1f      	ldr	r3, [pc, #124]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002616:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002624:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d114      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff fa49 	bl	8001acc <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	e00a      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7ff fa45 	bl	8001acc <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e240      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ee      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800266c:	d114      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002682:	4902      	ldr	r1, [pc, #8]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	608b      	str	r3, [r1, #8]
 8002688:	e00c      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	40007000 	.word	0x40007000
 8002694:	42470e40 	.word	0x42470e40
 8002698:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a49      	ldr	r2, [pc, #292]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800269e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026a2:	6093      	str	r3, [r2, #8]
 80026a4:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b0:	4944      	ldr	r1, [pc, #272]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80026c8:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80026ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80026d8:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	4937      	ldr	r1, [pc, #220]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002700:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	492e      	ldr	r1, [pc, #184]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d011      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	4926      	ldr	r1, [pc, #152]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273a:	d101      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800273c:	2301      	movs	r3, #1
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002752:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	491a      	ldr	r1, [pc, #104]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276a:	2b00      	cmp	r3, #0
 800276c:	d011      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002774:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277c:	4911      	ldr	r1, [pc, #68]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278c:	d101      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800278e:	2301      	movs	r3, #1
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d005      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a0:	f040 80ff 	bne.w	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027aa:	f7ff f98f 	bl	8001acc <HAL_GetTick>
 80027ae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027b0:	e00e      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027b2:	f7ff f98b 	bl	8001acc <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d907      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e188      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	424711e0 	.word	0x424711e0
 80027cc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027d0:	4b7e      	ldr	r3, [pc, #504]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ea      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d028      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d124      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002804:	4b71      	ldr	r3, [pc, #452]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280a:	0c1b      	lsrs	r3, r3, #16
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	3301      	adds	r3, #1
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002816:	4b6d      	ldr	r3, [pc, #436]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281c:	0e1b      	lsrs	r3, r3, #24
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	3b01      	subs	r3, #1
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	431a      	orrs	r2, r3
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	071b      	lsls	r3, r3, #28
 8002846:	4961      	ldr	r1, [pc, #388]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d004      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800286c:	2b00      	cmp	r3, #0
 800286e:	d035      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002878:	d130      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800287a:	4b54      	ldr	r3, [pc, #336]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800287c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	3301      	adds	r3, #1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800288c:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800288e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002892:	0f1b      	lsrs	r3, r3, #28
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	019b      	lsls	r3, r3, #6
 80028a4:	431a      	orrs	r2, r3
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	3b01      	subs	r3, #1
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	431a      	orrs	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	071b      	lsls	r3, r3, #28
 80028bc:	4943      	ldr	r1, [pc, #268]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028c4:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ca:	f023 021f 	bic.w	r2, r3, #31
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	493d      	ldr	r1, [pc, #244]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d029      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028f0:	d124      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	3301      	adds	r3, #1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290a:	0f1b      	lsrs	r3, r3, #28
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	019b      	lsls	r3, r3, #6
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	085b      	lsrs	r3, r3, #1
 8002924:	3b01      	subs	r3, #1
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	431a      	orrs	r2, r3
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	431a      	orrs	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	071b      	lsls	r3, r3, #28
 8002934:	4925      	ldr	r1, [pc, #148]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002944:	2b00      	cmp	r3, #0
 8002946:	d016      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	019b      	lsls	r3, r3, #6
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	3b01      	subs	r3, #1
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	071b      	lsls	r3, r3, #28
 800296e:	4917      	ldr	r1, [pc, #92]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800297c:	f7ff f8a6 	bl	8001acc <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002984:	f7ff f8a2 	bl	8001acc <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e09f      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	f040 8095 	bne.w	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029b0:	f7ff f88c 	bl	8001acc <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029b6:	e00f      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80029b8:	f7ff f888 	bl	8001acc <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d908      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e085      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	42470068 	.word	0x42470068
 80029d4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029d8:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e4:	d0e8      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x566>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02b      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d127      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	3b01      	subs	r3, #1
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	061b      	lsls	r3, r3, #24
 8002a3c:	4928      	ldr	r1, [pc, #160]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	3b01      	subs	r3, #1
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	4922      	ldr	r1, [pc, #136]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01d      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a72:	d118      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a74:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	0e1b      	lsrs	r3, r3, #24
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	019b      	lsls	r3, r3, #6
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	3b01      	subs	r3, #1
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	4910      	ldr	r1, [pc, #64]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aac:	f7ff f80e 	bl	8001acc <HAL_GetTick>
 8002ab0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ab4:	f7ff f80a 	bl	8001acc <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e007      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad2:	d1ef      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3730      	adds	r7, #48	; 0x30
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	42470070 	.word	0x42470070

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aec:	b0ae      	sub	sp, #184	; 0xb8
 8002aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0e:	4bcb      	ldr	r3, [pc, #812]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	f200 8206 	bhi.w	8002f28 <HAL_RCC_GetSysClockFreq+0x440>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b59 	.word	0x08002b59
 8002b28:	08002f29 	.word	0x08002f29
 8002b2c:	08002f29 	.word	0x08002f29
 8002b30:	08002f29 	.word	0x08002f29
 8002b34:	08002b61 	.word	0x08002b61
 8002b38:	08002f29 	.word	0x08002f29
 8002b3c:	08002f29 	.word	0x08002f29
 8002b40:	08002f29 	.word	0x08002f29
 8002b44:	08002b69 	.word	0x08002b69
 8002b48:	08002f29 	.word	0x08002f29
 8002b4c:	08002f29 	.word	0x08002f29
 8002b50:	08002f29 	.word	0x08002f29
 8002b54:	08002d59 	.word	0x08002d59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4bb9      	ldr	r3, [pc, #740]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b5e:	e1e7      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b60:	4bb8      	ldr	r3, [pc, #736]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b66:	e1e3      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b68:	4bb4      	ldr	r3, [pc, #720]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b74:	4bb1      	ldr	r3, [pc, #708]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d071      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b80:	4bae      	ldr	r3, [pc, #696]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	099b      	lsrs	r3, r3, #6
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b8c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	462b      	mov	r3, r5
 8002baa:	f04f 0000 	mov.w	r0, #0
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	0159      	lsls	r1, r3, #5
 8002bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb8:	0150      	lsls	r0, r2, #5
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	1a51      	subs	r1, r2, r1
 8002bc2:	6439      	str	r1, [r7, #64]	; 0x40
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bca:	647b      	str	r3, [r7, #68]	; 0x44
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002bd8:	4649      	mov	r1, r9
 8002bda:	018b      	lsls	r3, r1, #6
 8002bdc:	4641      	mov	r1, r8
 8002bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002be2:	4641      	mov	r1, r8
 8002be4:	018a      	lsls	r2, r1, #6
 8002be6:	4641      	mov	r1, r8
 8002be8:	1a51      	subs	r1, r2, r1
 8002bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bec:	4649      	mov	r1, r9
 8002bee:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c00:	4649      	mov	r1, r9
 8002c02:	00cb      	lsls	r3, r1, #3
 8002c04:	4641      	mov	r1, r8
 8002c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	00ca      	lsls	r2, r1, #3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	4622      	mov	r2, r4
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	eb42 0303 	adc.w	r3, r2, r3
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c30:	4629      	mov	r1, r5
 8002c32:	024b      	lsls	r3, r1, #9
 8002c34:	4621      	mov	r1, r4
 8002c36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	024a      	lsls	r2, r1, #9
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c54:	f7fd fad6 	bl	8000204 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c62:	e067      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c64:	4b75      	ldr	r3, [pc, #468]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c70:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c7e:	2300      	movs	r3, #0
 8002c80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c86:	4622      	mov	r2, r4
 8002c88:	462b      	mov	r3, r5
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	0159      	lsls	r1, r3, #5
 8002c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c98:	0150      	lsls	r0, r2, #5
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	1a51      	subs	r1, r2, r1
 8002ca2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002cb8:	4649      	mov	r1, r9
 8002cba:	018b      	lsls	r3, r1, #6
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	018a      	lsls	r2, r1, #6
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ccc:	4649      	mov	r1, r9
 8002cce:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cde:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ce2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce6:	4692      	mov	sl, r2
 8002ce8:	469b      	mov	fp, r3
 8002cea:	4623      	mov	r3, r4
 8002cec:	eb1a 0303 	adds.w	r3, sl, r3
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	462b      	mov	r3, r5
 8002cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d06:	4629      	mov	r1, r5
 8002d08:	028b      	lsls	r3, r1, #10
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d10:	4621      	mov	r1, r4
 8002d12:	028a      	lsls	r2, r1, #10
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d20:	677a      	str	r2, [r7, #116]	; 0x74
 8002d22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002d26:	f7fd fa6d 	bl	8000204 <__aeabi_uldivmod>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4613      	mov	r3, r2
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d34:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d56:	e0eb      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d58:	4b38      	ldr	r3, [pc, #224]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d64:	4b35      	ldr	r3, [pc, #212]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d06b      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d70:	4b32      	ldr	r3, [pc, #200]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	2200      	movs	r2, #0
 8002d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d82:	663b      	str	r3, [r7, #96]	; 0x60
 8002d84:	2300      	movs	r3, #0
 8002d86:	667b      	str	r3, [r7, #100]	; 0x64
 8002d88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	462b      	mov	r3, r5
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	0159      	lsls	r1, r3, #5
 8002d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9e:	0150      	lsls	r0, r2, #5
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4621      	mov	r1, r4
 8002da6:	1a51      	subs	r1, r2, r1
 8002da8:	61b9      	str	r1, [r7, #24]
 8002daa:	4629      	mov	r1, r5
 8002dac:	eb63 0301 	sbc.w	r3, r3, r1
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002dbe:	4659      	mov	r1, fp
 8002dc0:	018b      	lsls	r3, r1, #6
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc8:	4651      	mov	r1, sl
 8002dca:	018a      	lsls	r2, r1, #6
 8002dcc:	4651      	mov	r1, sl
 8002dce:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd2:	4659      	mov	r1, fp
 8002dd4:	eb63 0901 	sbc.w	r9, r3, r1
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dec:	4690      	mov	r8, r2
 8002dee:	4699      	mov	r9, r3
 8002df0:	4623      	mov	r3, r4
 8002df2:	eb18 0303 	adds.w	r3, r8, r3
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	462b      	mov	r3, r5
 8002dfa:	eb49 0303 	adc.w	r3, r9, r3
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	024b      	lsls	r3, r1, #9
 8002e10:	4621      	mov	r1, r4
 8002e12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e16:	4621      	mov	r1, r4
 8002e18:	024a      	lsls	r2, r1, #9
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e22:	2200      	movs	r2, #0
 8002e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e2c:	f7fd f9ea 	bl	8000204 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4613      	mov	r3, r2
 8002e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e3a:	e065      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x420>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	00f42400 	.word	0x00f42400
 8002e44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e48:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	4611      	mov	r1, r2
 8002e54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e58:	653b      	str	r3, [r7, #80]	; 0x50
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	657b      	str	r3, [r7, #84]	; 0x54
 8002e5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e62:	4642      	mov	r2, r8
 8002e64:	464b      	mov	r3, r9
 8002e66:	f04f 0000 	mov.w	r0, #0
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	0159      	lsls	r1, r3, #5
 8002e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e74:	0150      	lsls	r0, r2, #5
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4641      	mov	r1, r8
 8002e7c:	1a51      	subs	r1, r2, r1
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	4649      	mov	r1, r9
 8002e82:	eb63 0301 	sbc.w	r3, r3, r1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e94:	4659      	mov	r1, fp
 8002e96:	018b      	lsls	r3, r1, #6
 8002e98:	4651      	mov	r1, sl
 8002e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	018a      	lsls	r2, r1, #6
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	1a54      	subs	r4, r2, r1
 8002ea6:	4659      	mov	r1, fp
 8002ea8:	eb63 0501 	sbc.w	r5, r3, r1
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	00eb      	lsls	r3, r5, #3
 8002eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eba:	00e2      	lsls	r2, r4, #3
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	461d      	mov	r5, r3
 8002ec0:	4643      	mov	r3, r8
 8002ec2:	18e3      	adds	r3, r4, r3
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	eb45 0303 	adc.w	r3, r5, r3
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eda:	4629      	mov	r1, r5
 8002edc:	028b      	lsls	r3, r1, #10
 8002ede:	4621      	mov	r1, r4
 8002ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	028a      	lsls	r2, r1, #10
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ef6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002efa:	f7fd f983 	bl	8000204 <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4613      	mov	r3, r2
 8002f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	0f1b      	lsrs	r3, r3, #28
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f26:	e003      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	37b8      	adds	r7, #184	; 0xb8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	00f42400 	.word	0x00f42400

08002f48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e28d      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8083 	beq.w	800306e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f68:	4b94      	ldr	r3, [pc, #592]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d019      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f74:	4b91      	ldr	r3, [pc, #580]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f80:	4b8e      	ldr	r3, [pc, #568]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8e:	4b8b      	ldr	r3, [pc, #556]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d112      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9a:	4b88      	ldr	r3, [pc, #544]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	4b84      	ldr	r3, [pc, #528]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d05b      	beq.n	800306c <HAL_RCC_OscConfig+0x124>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d157      	bne.n	800306c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e25a      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x90>
 8002fca:	4b7c      	ldr	r3, [pc, #496]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a7b      	ldr	r2, [pc, #492]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e01d      	b.n	8003014 <HAL_RCC_OscConfig+0xcc>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0xb4>
 8002fe2:	4b76      	ldr	r3, [pc, #472]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a75      	ldr	r2, [pc, #468]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a72      	ldr	r2, [pc, #456]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0xcc>
 8002ffc:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6e      	ldr	r2, [pc, #440]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b6c      	ldr	r3, [pc, #432]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a6b      	ldr	r2, [pc, #428]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 800300e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fd56 	bl	8001acc <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe fd52 	bl	8001acc <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e21f      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b61      	ldr	r3, [pc, #388]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0xdc>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fd42 	bl	8001acc <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fd3e 	bl	8001acc <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e20b      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	4b57      	ldr	r3, [pc, #348]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x104>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d06f      	beq.n	800315a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800307a:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b00      	cmp	r3, #0
 8003084:	d017      	beq.n	80030b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003086:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800308e:	2b08      	cmp	r3, #8
 8003090:	d105      	bne.n	800309e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003092:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d11c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b44      	ldr	r3, [pc, #272]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x186>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e1d3      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4937      	ldr	r1, [pc, #220]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e03a      	b.n	800315a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <HAL_RCC_OscConfig+0x278>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fceb 	bl	8001acc <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe fce7 	bl	8001acc <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e1b4      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4925      	ldr	r1, [pc, #148]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
 800312c:	e015      	b.n	800315a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_RCC_OscConfig+0x278>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fcca 	bl	8001acc <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313c:	f7fe fcc6 	bl	8001acc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e193      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d036      	beq.n	80031d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d016      	beq.n	800319c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_RCC_OscConfig+0x27c>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fcaa 	bl	8001acc <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317c:	f7fe fca6 	bl	8001acc <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e173      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_OscConfig+0x274>)
 8003190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x234>
 800319a:	e01b      	b.n	80031d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCC_OscConfig+0x27c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fe fc93 	bl	8001acc <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	e00e      	b.n	80031c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fe fc8f 	bl	8001acc <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d907      	bls.n	80031c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e15c      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
 80031bc:	40023800 	.word	0x40023800
 80031c0:	42470000 	.word	0x42470000
 80031c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	4b8a      	ldr	r3, [pc, #552]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ea      	bne.n	80031aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8097 	beq.w	8003310 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e6:	4b83      	ldr	r3, [pc, #524]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10f      	bne.n	8003212 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a7e      	ldr	r2, [pc, #504]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b7c      	ldr	r3, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <HAL_RCC_OscConfig+0x4b0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d118      	bne.n	8003250 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321e:	4b76      	ldr	r3, [pc, #472]	; (80033f8 <HAL_RCC_OscConfig+0x4b0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a75      	ldr	r2, [pc, #468]	; (80033f8 <HAL_RCC_OscConfig+0x4b0>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322a:	f7fe fc4f 	bl	8001acc <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003232:	f7fe fc4b 	bl	8001acc <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e118      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	4b6c      	ldr	r3, [pc, #432]	; (80033f8 <HAL_RCC_OscConfig+0x4b0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x31e>
 8003258:	4b66      	ldr	r3, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	4a65      	ldr	r2, [pc, #404]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6713      	str	r3, [r2, #112]	; 0x70
 8003264:	e01c      	b.n	80032a0 <HAL_RCC_OscConfig+0x358>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b05      	cmp	r3, #5
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x340>
 800326e:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a60      	ldr	r2, [pc, #384]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	4b5e      	ldr	r3, [pc, #376]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a5d      	ldr	r2, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0x358>
 8003288:	4b5a      	ldr	r3, [pc, #360]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a59      	ldr	r2, [pc, #356]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a56      	ldr	r2, [pc, #344]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	f023 0304 	bic.w	r3, r3, #4
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d015      	beq.n	80032d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe fc10 	bl	8001acc <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b0:	f7fe fc0c 	bl	8001acc <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0d7      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c6:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ee      	beq.n	80032b0 <HAL_RCC_OscConfig+0x368>
 80032d2:	e014      	b.n	80032fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe fbfa 	bl	8001acc <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f7fe fbf6 	bl	8001acc <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e0c1      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f2:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1ee      	bne.n	80032dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003304:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	4a3a      	ldr	r2, [pc, #232]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 800330a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80ad 	beq.w	8003474 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800331a:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b08      	cmp	r3, #8
 8003324:	d060      	beq.n	80033e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d145      	bne.n	80033ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332e:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_RCC_OscConfig+0x4b4>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fe fbca 	bl	8001acc <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe fbc6 	bl	8001acc <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e093      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	019b      	lsls	r3, r3, #6
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	3b01      	subs	r3, #1
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	071b      	lsls	r3, r3, #28
 8003386:	491b      	ldr	r1, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x4b4>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fe fb9b 	bl	8001acc <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339a:	f7fe fb97 	bl	8001acc <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e064      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x452>
 80033b8:	e05c      	b.n	8003474 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_RCC_OscConfig+0x4b4>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fe fb84 	bl	8001acc <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fb80 	bl	8001acc <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e04d      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x480>
 80033e6:	e045      	b.n	8003474 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e040      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000
 80033fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003400:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <HAL_RCC_OscConfig+0x538>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d030      	beq.n	8003470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d129      	bne.n	8003470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d122      	bne.n	8003470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003430:	4013      	ands	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003438:	4293      	cmp	r3, r2
 800343a:	d119      	bne.n	8003470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	3b01      	subs	r3, #1
 800344a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d10f      	bne.n	8003470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800

08003484 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003484:	b480      	push	{r7}
 8003486:	b08b      	sub	sp, #44	; 0x2c
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	613b      	str	r3, [r7, #16]
  return result;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80034aa:	2320      	movs	r3, #32
 80034ac:	e003      	b.n	80034b6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2103      	movs	r1, #3
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	401a      	ands	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	61fb      	str	r3, [r7, #28]
  return result;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e003      	b.n	80034e4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	601a      	str	r2, [r3, #0]
}
 80034f2:	bf00      	nop
 80034f4:	372c      	adds	r7, #44	; 0x2c
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	43db      	mvns	r3, r3
 8003512:	401a      	ands	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	431a      	orrs	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800352e:	b480      	push	{r7}
 8003530:	b08b      	sub	sp, #44	; 0x2c
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	613b      	str	r3, [r7, #16]
  return result;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e003      	b.n	8003560 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2103      	movs	r1, #3
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	401a      	ands	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	61fb      	str	r3, [r7, #28]
  return result;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003582:	2320      	movs	r3, #32
 8003584:	e003      	b.n	800358e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	431a      	orrs	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800359c:	bf00      	nop
 800359e:	372c      	adds	r7, #44	; 0x2c
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b08b      	sub	sp, #44	; 0x2c
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	613b      	str	r3, [r7, #16]
  return result;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e003      	b.n	80035da <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2103      	movs	r1, #3
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	401a      	ands	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	61fb      	str	r3, [r7, #28]
  return result;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80035fc:	2320      	movs	r3, #32
 80035fe:	e003      	b.n	8003608 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	60da      	str	r2, [r3, #12]
}
 8003616:	bf00      	nop
 8003618:	372c      	adds	r7, #44	; 0x2c
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003622:	b480      	push	{r7}
 8003624:	b08b      	sub	sp, #44	; 0x2c
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	613b      	str	r3, [r7, #16]
  return result;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003648:	2320      	movs	r3, #32
 800364a:	e003      	b.n	8003654 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	210f      	movs	r1, #15
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	401a      	ands	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	61fb      	str	r3, [r7, #28]
  return result;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003676:	2320      	movs	r3, #32
 8003678:	e003      	b.n	8003682 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	431a      	orrs	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003690:	bf00      	nop
 8003692:	372c      	adds	r7, #44	; 0x2c
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800369c:	b480      	push	{r7}
 800369e:	b08b      	sub	sp, #44	; 0x2c
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	613b      	str	r3, [r7, #16]
  return result;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	210f      	movs	r1, #15
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	401a      	ands	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	61fb      	str	r3, [r7, #28]
  return result;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80036f4:	2320      	movs	r3, #32
 80036f6:	e003      	b.n	8003700 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800370e:	bf00      	nop
 8003710:	372c      	adds	r7, #44	; 0x2c
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b08a      	sub	sp, #40	; 0x28
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8003728:	2300      	movs	r3, #0
 800372a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	617b      	str	r3, [r7, #20]
  return result;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <LL_GPIO_Init+0x2e>
    return 32U;
 8003744:	2320      	movs	r3, #32
 8003746:	e003      	b.n	8003750 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003752:	e057      	b.n	8003804 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	4013      	ands	r3, r2
 8003762:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d049      	beq.n	80037fe <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d003      	beq.n	800377a <LL_GPIO_Init+0x60>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d10d      	bne.n	8003796 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	461a      	mov	r2, r3
 8003780:	6a39      	ldr	r1, [r7, #32]
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fed3 	bl	800352e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	461a      	mov	r2, r3
 800378e:	6a39      	ldr	r1, [r7, #32]
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff feb4 	bl	80034fe <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	461a      	mov	r2, r3
 800379c:	6a39      	ldr	r1, [r7, #32]
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ff02 	bl	80035a8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d121      	bne.n	80037f0 <LL_GPIO_Init+0xd6>
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	60bb      	str	r3, [r7, #8]
  return result;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <LL_GPIO_Init+0xac>
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e003      	b.n	80037ce <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80037ce:	2b07      	cmp	r3, #7
 80037d0:	d807      	bhi.n	80037e2 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	461a      	mov	r2, r3
 80037d8:	6a39      	ldr	r1, [r7, #32]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff21 	bl	8003622 <LL_GPIO_SetAFPin_0_7>
 80037e0:	e006      	b.n	80037f0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	461a      	mov	r2, r3
 80037e8:	6a39      	ldr	r1, [r7, #32]
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ff56 	bl	800369c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6a39      	ldr	r1, [r7, #32]
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fe43 	bl	8003484 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	3301      	adds	r3, #1
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1a0      	bne.n	8003754 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3728      	adds	r7, #40	; 0x28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <LL_RCC_GetSysClkSource+0x18>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800

08003838 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <LL_RCC_GetAHBPrescaler+0x18>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <LL_RCC_GetAPB1Prescaler+0x18>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800

08003870 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800

0800388c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <LL_RCC_PLL_GetMainSource+0x18>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800

080038a8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <LL_RCC_PLL_GetN+0x18>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	40023800 	.word	0x40023800

080038c4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <LL_RCC_PLL_GetP+0x18>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800

080038e0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <LL_RCC_PLL_GetR+0x18>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800

080038fc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <LL_RCC_PLL_GetDivider+0x18>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800

08003918 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003920:	f000 f820 	bl	8003964 <RCC_GetSystemClockFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f85c 	bl	80039ec <RCC_GetHCLKClockFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f86a 	bl	8003a18 <RCC_GetPCLK1ClockFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f876 	bl	8003a40 <RCC_GetPCLK2ClockFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60da      	str	r2, [r3, #12]
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800396e:	f7ff ff55 	bl	800381c <LL_RCC_GetSysClkSource>
 8003972:	4603      	mov	r3, r0
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d82d      	bhi.n	80039d4 <RCC_GetSystemClockFreq+0x70>
 8003978:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <RCC_GetSystemClockFreq+0x1c>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	080039b5 	.word	0x080039b5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039d5 	.word	0x080039d5
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039bb 	.word	0x080039bb
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039d5 	.word	0x080039d5
 800399c:	080039d5 	.word	0x080039d5
 80039a0:	080039c1 	.word	0x080039c1
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039d5 	.word	0x080039d5
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039cb 	.word	0x080039cb
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <RCC_GetSystemClockFreq+0x80>)
 80039b6:	607b      	str	r3, [r7, #4]
      break;
 80039b8:	e00f      	b.n	80039da <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <RCC_GetSystemClockFreq+0x84>)
 80039bc:	607b      	str	r3, [r7, #4]
      break;
 80039be:	e00c      	b.n	80039da <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80039c0:	2008      	movs	r0, #8
 80039c2:	f000 f851 	bl	8003a68 <RCC_PLL_GetFreqDomain_SYS>
 80039c6:	6078      	str	r0, [r7, #4]
      break;
 80039c8:	e007      	b.n	80039da <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80039ca:	200c      	movs	r0, #12
 80039cc:	f000 f84c 	bl	8003a68 <RCC_PLL_GetFreqDomain_SYS>
 80039d0:	6078      	str	r0, [r7, #4]
      break;
 80039d2:	e002      	b.n	80039da <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <RCC_GetSystemClockFreq+0x80>)
 80039d6:	607b      	str	r3, [r7, #4]
      break;
 80039d8:	bf00      	nop
  }

  return frequency;
 80039da:	687b      	ldr	r3, [r7, #4]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	00f42400 	.word	0x00f42400
 80039e8:	007a1200 	.word	0x007a1200

080039ec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80039f4:	f7ff ff20 	bl	8003838 <LL_RCC_GetAHBPrescaler>
 80039f8:	4603      	mov	r3, r0
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <RCC_GetHCLKClockFreq+0x28>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	461a      	mov	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	40d3      	lsrs	r3, r2
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	08004750 	.word	0x08004750

08003a18 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003a20:	f7ff ff18 	bl	8003854 <LL_RCC_GetAPB1Prescaler>
 8003a24:	4603      	mov	r3, r0
 8003a26:	0a9b      	lsrs	r3, r3, #10
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <RCC_GetPCLK1ClockFreq+0x24>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	40d3      	lsrs	r3, r2
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	08004760 	.word	0x08004760

08003a40 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003a48:	f7ff ff12 	bl	8003870 <LL_RCC_GetAPB2Prescaler>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	0b5b      	lsrs	r3, r3, #13
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <RCC_GetPCLK2ClockFreq+0x24>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	461a      	mov	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	40d3      	lsrs	r3, r2
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	08004760 	.word	0x08004760

08003a68 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003a7c:	f7ff ff06 	bl	800388c <LL_RCC_PLL_GetMainSource>
 8003a80:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8e:	d003      	beq.n	8003a98 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003a90:	e005      	b.n	8003a9e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003a92:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003a94:	617b      	str	r3, [r7, #20]
      break;
 8003a96:	e005      	b.n	8003aa4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003a9a:	617b      	str	r3, [r7, #20]
      break;
 8003a9c:	e002      	b.n	8003aa4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003aa0:	617b      	str	r3, [r7, #20]
      break;
 8003aa2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d114      	bne.n	8003ad4 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003aaa:	f7ff ff27 	bl	80038fc <LL_RCC_PLL_GetDivider>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fbb3 f4f2 	udiv	r4, r3, r2
 8003ab6:	f7ff fef7 	bl	80038a8 <LL_RCC_PLL_GetN>
 8003aba:	4603      	mov	r3, r0
 8003abc:	fb03 f404 	mul.w	r4, r3, r4
 8003ac0:	f7ff ff00 	bl	80038c4 <LL_RCC_PLL_GetP>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	0c1b      	lsrs	r3, r3, #16
 8003ac8:	3301      	adds	r3, #1
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	e011      	b.n	8003af8 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003ad4:	f7ff ff12 	bl	80038fc <LL_RCC_PLL_GetDivider>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	fbb3 f4f2 	udiv	r4, r3, r2
 8003ae0:	f7ff fee2 	bl	80038a8 <LL_RCC_PLL_GetN>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	fb03 f404 	mul.w	r4, r3, r4
 8003aea:	f7ff fef9 	bl	80038e0 <LL_RCC_PLL_GetR>
 8003aee:	4603      	mov	r3, r0
 8003af0:	0f1b      	lsrs	r3, r3, #28
 8003af2:	fbb4 f3f3 	udiv	r3, r4, r3
 8003af6:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003af8:	693b      	ldr	r3, [r7, #16]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}
 8003b02:	bf00      	nop
 8003b04:	00f42400 	.word	0x00f42400
 8003b08:	007a1200 	.word	0x007a1200

08003b0c <LL_USART_IsEnabled>:
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_USART_SetStopBitsLength>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_USART_SetHWFlowCtrl>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	615a      	str	r2, [r3, #20]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_USART_SetBaudRate>:
{
 8003b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b84:	b0c0      	sub	sp, #256	; 0x100
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b8c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003b90:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003b94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba0:	f040 810c 	bne.w	8003dbc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003ba4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	462b      	mov	r3, r5
 8003bba:	1891      	adds	r1, r2, r2
 8003bbc:	6639      	str	r1, [r7, #96]	; 0x60
 8003bbe:	415b      	adcs	r3, r3
 8003bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	eb12 0801 	adds.w	r8, r2, r1
 8003bcc:	4629      	mov	r1, r5
 8003bce:	eb43 0901 	adc.w	r9, r3, r1
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003be6:	4690      	mov	r8, r2
 8003be8:	4699      	mov	r9, r3
 8003bea:	4623      	mov	r3, r4
 8003bec:	eb18 0303 	adds.w	r3, r8, r3
 8003bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	eb49 0303 	adc.w	r3, r9, r3
 8003bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c02:	2200      	movs	r2, #0
 8003c04:	469a      	mov	sl, r3
 8003c06:	4693      	mov	fp, r2
 8003c08:	eb1a 030a 	adds.w	r3, sl, sl
 8003c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c0e:	eb4b 030b 	adc.w	r3, fp, fp
 8003c12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c1c:	f7fc faf2 	bl	8000204 <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <LL_USART_SetBaudRate+0x238>)
 8003c26:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	b29c      	uxth	r4, r3
 8003c32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c3c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c40:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003c44:	4642      	mov	r2, r8
 8003c46:	464b      	mov	r3, r9
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	6539      	str	r1, [r7, #80]	; 0x50
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c54:	4641      	mov	r1, r8
 8003c56:	1851      	adds	r1, r2, r1
 8003c58:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	414b      	adcs	r3, r1
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	00cb      	lsls	r3, r1, #3
 8003c70:	4651      	mov	r1, sl
 8003c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c76:	4651      	mov	r1, sl
 8003c78:	00ca      	lsls	r2, r1, #3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4642      	mov	r2, r8
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c88:	464b      	mov	r3, r9
 8003c8a:	460a      	mov	r2, r1
 8003c8c:	eb42 0303 	adc.w	r3, r2, r3
 8003c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c9e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003ca2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	18db      	adds	r3, r3, r3
 8003caa:	643b      	str	r3, [r7, #64]	; 0x40
 8003cac:	4613      	mov	r3, r2
 8003cae:	eb42 0303 	adc.w	r3, r2, r3
 8003cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cb8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003cbc:	f7fc faa2 	bl	8000204 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <LL_USART_SetBaudRate+0x238>)
 8003cc8:	fba3 2301 	umull	r2, r3, r3, r1
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	2264      	movs	r2, #100	; 0x64
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	1acb      	subs	r3, r1, r3
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cdc:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <LL_USART_SetBaudRate+0x238>)
 8003cde:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	4423      	add	r3, r4
 8003cf2:	b29c      	uxth	r4, r3
 8003cf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cfe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d02:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003d06:	4642      	mov	r2, r8
 8003d08:	464b      	mov	r3, r9
 8003d0a:	1891      	adds	r1, r2, r2
 8003d0c:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d0e:	415b      	adcs	r3, r3
 8003d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d16:	4641      	mov	r1, r8
 8003d18:	1851      	adds	r1, r2, r1
 8003d1a:	6339      	str	r1, [r7, #48]	; 0x30
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	414b      	adcs	r3, r1
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d2e:	4659      	mov	r1, fp
 8003d30:	00cb      	lsls	r3, r1, #3
 8003d32:	4651      	mov	r1, sl
 8003d34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d38:	4651      	mov	r1, sl
 8003d3a:	00ca      	lsls	r2, r1, #3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4603      	mov	r3, r0
 8003d42:	4642      	mov	r2, r8
 8003d44:	189b      	adds	r3, r3, r2
 8003d46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	460a      	mov	r2, r1
 8003d4e:	eb42 0303 	adc.w	r3, r2, r3
 8003d52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d60:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003d64:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	18db      	adds	r3, r3, r3
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6e:	4613      	mov	r3, r2
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d7a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003d7e:	f7fc fa41 	bl	8000204 <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <LL_USART_SetBaudRate+0x238>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2164      	movs	r1, #100	; 0x64
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	3332      	adds	r3, #50	; 0x32
 8003d9a:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <LL_USART_SetBaudRate+0x238>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	4423      	add	r3, r4
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db4:	609a      	str	r2, [r3, #8]
}
 8003db6:	e108      	b.n	8003fca <LL_USART_SetBaudRate+0x44a>
 8003db8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003dbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dc6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003dca:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003dce:	4642      	mov	r2, r8
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	1891      	adds	r1, r2, r2
 8003dd4:	6239      	str	r1, [r7, #32]
 8003dd6:	415b      	adcs	r3, r3
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dde:	4641      	mov	r1, r8
 8003de0:	1854      	adds	r4, r2, r1
 8003de2:	4649      	mov	r1, r9
 8003de4:	eb43 0501 	adc.w	r5, r3, r1
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	00eb      	lsls	r3, r5, #3
 8003df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003df6:	00e2      	lsls	r2, r4, #3
 8003df8:	4614      	mov	r4, r2
 8003dfa:	461d      	mov	r5, r3
 8003dfc:	4643      	mov	r3, r8
 8003dfe:	18e3      	adds	r3, r4, r3
 8003e00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e04:	464b      	mov	r3, r9
 8003e06:	eb45 0303 	adc.w	r3, r5, r3
 8003e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e18:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003e28:	4629      	mov	r1, r5
 8003e2a:	008b      	lsls	r3, r1, #2
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e32:	4621      	mov	r1, r4
 8003e34:	008a      	lsls	r2, r1, #2
 8003e36:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003e3a:	f7fc f9e3 	bl	8000204 <__aeabi_uldivmod>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4b65      	ldr	r3, [pc, #404]	; (8003fd8 <LL_USART_SetBaudRate+0x458>)
 8003e44:	fba3 2302 	umull	r2, r3, r3, r2
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	b29c      	uxth	r4, r3
 8003e50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e5e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003e62:	4642      	mov	r2, r8
 8003e64:	464b      	mov	r3, r9
 8003e66:	1891      	adds	r1, r2, r2
 8003e68:	61b9      	str	r1, [r7, #24]
 8003e6a:	415b      	adcs	r3, r3
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e72:	4641      	mov	r1, r8
 8003e74:	1851      	adds	r1, r2, r1
 8003e76:	6139      	str	r1, [r7, #16]
 8003e78:	4649      	mov	r1, r9
 8003e7a:	414b      	adcs	r3, r1
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e8a:	4659      	mov	r1, fp
 8003e8c:	00cb      	lsls	r3, r1, #3
 8003e8e:	4651      	mov	r1, sl
 8003e90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e94:	4651      	mov	r1, sl
 8003e96:	00ca      	lsls	r2, r1, #3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4642      	mov	r2, r8
 8003ea0:	189b      	adds	r3, r3, r2
 8003ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	eb42 0303 	adc.w	r3, r2, r3
 8003eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003eb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ebc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003ecc:	4649      	mov	r1, r9
 8003ece:	008b      	lsls	r3, r1, #2
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	008a      	lsls	r2, r1, #2
 8003eda:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003ede:	f7fc f991 	bl	8000204 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <LL_USART_SetBaudRate+0x458>)
 8003eea:	fba3 2301 	umull	r2, r3, r3, r1
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2264      	movs	r2, #100	; 0x64
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	1acb      	subs	r3, r1, r3
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	3332      	adds	r3, #50	; 0x32
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <LL_USART_SetBaudRate+0x458>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	4423      	add	r3, r4
 8003f0e:	b29c      	uxth	r4, r3
 8003f10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f14:	2200      	movs	r2, #0
 8003f16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f18:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f1a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	1891      	adds	r1, r2, r2
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	415b      	adcs	r3, r3
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f2e:	4641      	mov	r1, r8
 8003f30:	1851      	adds	r1, r2, r1
 8003f32:	6039      	str	r1, [r7, #0]
 8003f34:	4649      	mov	r1, r9
 8003f36:	414b      	adcs	r3, r1
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f46:	4659      	mov	r1, fp
 8003f48:	00cb      	lsls	r3, r1, #3
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f50:	4651      	mov	r1, sl
 8003f52:	00ca      	lsls	r2, r1, #3
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4642      	mov	r2, r8
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f60:	464b      	mov	r3, r9
 8003f62:	460a      	mov	r2, r1
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	677b      	str	r3, [r7, #116]	; 0x74
 8003f6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f6e:	2200      	movs	r2, #0
 8003f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003f80:	4649      	mov	r1, r9
 8003f82:	008b      	lsls	r3, r1, #2
 8003f84:	4641      	mov	r1, r8
 8003f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	008a      	lsls	r2, r1, #2
 8003f8e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003f92:	f7fc f937 	bl	8000204 <__aeabi_uldivmod>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <LL_USART_SetBaudRate+0x458>)
 8003f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	2164      	movs	r1, #100	; 0x64
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	3332      	adds	r3, #50	; 0x32
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <LL_USART_SetBaudRate+0x458>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4423      	add	r3, r4
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc8:	609a      	str	r2, [r3, #8]
}
 8003fca:	bf00      	nop
 8003fcc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd6:	bf00      	nop
 8003fd8:	51eb851f 	.word	0x51eb851f

08003fdc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fd8c 	bl	8003b0c <LL_USART_IsEnabled>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d15e      	bne.n	80040b8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004002:	f023 030c 	bic.w	r3, r3, #12
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	6851      	ldr	r1, [r2, #4]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	68d2      	ldr	r2, [r2, #12]
 800400e:	4311      	orrs	r1, r2
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	6912      	ldr	r2, [r2, #16]
 8004014:	4311      	orrs	r1, r2
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	6992      	ldr	r2, [r2, #24]
 800401a:	430a      	orrs	r2, r1
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	4619      	mov	r1, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fd83 	bl	8003b34 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff fd90 	bl	8003b5a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800403a:	f107 0308 	add.w	r3, r7, #8
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fc6a 	bl	8003918 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <LL_USART_Init+0xe8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d102      	bne.n	8004052 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e021      	b.n	8004096 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <LL_USART_Init+0xec>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d102      	bne.n	8004060 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	e01a      	b.n	8004096 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a1a      	ldr	r2, [pc, #104]	; (80040cc <LL_USART_Init+0xf0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d102      	bne.n	800406e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e013      	b.n	8004096 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <LL_USART_Init+0xf4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d102      	bne.n	800407c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	e00c      	b.n	8004096 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <LL_USART_Init+0xf8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d102      	bne.n	800408a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	e005      	b.n	8004096 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <LL_USART_Init+0xfc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00d      	beq.n	80040b8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d009      	beq.n	80040b8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80040a4:	2300      	movs	r3, #0
 80040a6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80040b0:	69b9      	ldr	r1, [r7, #24]
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff fd64 	bl	8003b80 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80040b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40011000 	.word	0x40011000
 80040c8:	40004400 	.word	0x40004400
 80040cc:	40004800 	.word	0x40004800
 80040d0:	40011400 	.word	0x40011400
 80040d4:	40004c00 	.word	0x40004c00
 80040d8:	40005000 	.word	0x40005000

080040dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040dc:	b084      	sub	sp, #16
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	f107 001c 	add.w	r0, r7, #28
 80040ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d123      	bne.n	800413e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800410a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800411e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004122:	2b01      	cmp	r3, #1
 8004124:	d105      	bne.n	8004132 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fa9a 	bl	800466c <USB_CoreReset>
 8004138:	4603      	mov	r3, r0
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	e01b      	b.n	8004176 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa8e 	bl	800466c <USB_CoreReset>
 8004150:	4603      	mov	r3, r0
 8004152:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004154:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38
 8004168:	e005      	b.n	8004176 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004176:	7fbb      	ldrb	r3, [r7, #30]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10b      	bne.n	8004194 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f043 0206 	orr.w	r2, r3, #6
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041a0:	b004      	add	sp, #16
 80041a2:	4770      	bx	lr

080041a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 0201 	bic.w	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d115      	bne.n	8004214 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041f4:	200a      	movs	r0, #10
 80041f6:	f7fd fc75 	bl	8001ae4 <HAL_Delay>
      ms += 10U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	330a      	adds	r3, #10
 80041fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa25 	bl	8004650 <USB_GetMode>
 8004206:	4603      	mov	r3, r0
 8004208:	2b01      	cmp	r3, #1
 800420a:	d01e      	beq.n	800424a <USB_SetCurrentMode+0x84>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2bc7      	cmp	r3, #199	; 0xc7
 8004210:	d9f0      	bls.n	80041f4 <USB_SetCurrentMode+0x2e>
 8004212:	e01a      	b.n	800424a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d115      	bne.n	8004246 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004226:	200a      	movs	r0, #10
 8004228:	f7fd fc5c 	bl	8001ae4 <HAL_Delay>
      ms += 10U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	330a      	adds	r3, #10
 8004230:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa0c 	bl	8004650 <USB_GetMode>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <USB_SetCurrentMode+0x84>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2bc7      	cmp	r3, #199	; 0xc7
 8004242:	d9f0      	bls.n	8004226 <USB_SetCurrentMode+0x60>
 8004244:	e001      	b.n	800424a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e005      	b.n	8004256 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2bc8      	cmp	r3, #200	; 0xc8
 800424e:	d101      	bne.n	8004254 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004260:	b084      	sub	sp, #16
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800426e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	e009      	b.n	8004294 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	3340      	adds	r3, #64	; 0x40
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	2200      	movs	r2, #0
 800428c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	3301      	adds	r3, #1
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b0e      	cmp	r3, #14
 8004298:	d9f2      	bls.n	8004280 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800429a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d11c      	bne.n	80042dc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e005      	b.n	80042e8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042ee:	461a      	mov	r2, r3
 80042f0:	2300      	movs	r3, #0
 80042f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042f4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10d      	bne.n	8004318 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004304:	2100      	movs	r1, #0
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f968 	bl	80045dc <USB_SetDevSpeed>
 800430c:	e008      	b.n	8004320 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800430e:	2101      	movs	r1, #1
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f963 	bl	80045dc <USB_SetDevSpeed>
 8004316:	e003      	b.n	8004320 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004318:	2103      	movs	r1, #3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f95e 	bl	80045dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004320:	2110      	movs	r1, #16
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f8fa 	bl	800451c <USB_FlushTxFifo>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f924 	bl	8004580 <USB_FlushRxFifo>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004348:	461a      	mov	r2, r3
 800434a:	2300      	movs	r3, #0
 800434c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004354:	461a      	mov	r2, r3
 8004356:	2300      	movs	r3, #0
 8004358:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004360:	461a      	mov	r2, r3
 8004362:	2300      	movs	r3, #0
 8004364:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	e043      	b.n	80043f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800437e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004382:	d118      	bne.n	80043b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004396:	461a      	mov	r2, r3
 8004398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e013      	b.n	80043c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	461a      	mov	r2, r3
 80043ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	e008      	b.n	80043c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d4:	461a      	mov	r2, r3
 80043d6:	2300      	movs	r3, #0
 80043d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e6:	461a      	mov	r2, r3
 80043e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3301      	adds	r3, #1
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043f8:	461a      	mov	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d3b5      	bcc.n	800436c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e043      	b.n	800448e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800441c:	d118      	bne.n	8004450 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	e013      	b.n	8004462 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	461a      	mov	r2, r3
 8004448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e008      	b.n	8004462 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445c:	461a      	mov	r2, r3
 800445e:	2300      	movs	r3, #0
 8004460:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	461a      	mov	r2, r3
 8004482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004492:	461a      	mov	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4293      	cmp	r3, r2
 8004498:	d3b5      	bcc.n	8004406 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f043 0210 	orr.w	r2, r3, #16
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <USB_DevInit+0x2b8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f043 0208 	orr.w	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004500:	f043 0304 	orr.w	r3, r3, #4
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004508:	7dfb      	ldrb	r3, [r7, #23]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004514:	b004      	add	sp, #16
 8004516:	4770      	bx	lr
 8004518:	803c3800 	.word	0x803c3800

0800451c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3301      	adds	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004536:	d901      	bls.n	800453c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e01b      	b.n	8004574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	daf2      	bge.n	800452a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	019b      	lsls	r3, r3, #6
 800454c:	f043 0220 	orr.w	r2, r3, #32
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004560:	d901      	bls.n	8004566 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e006      	b.n	8004574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b20      	cmp	r3, #32
 8004570:	d0f0      	beq.n	8004554 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004598:	d901      	bls.n	800459e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e018      	b.n	80045d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	daf2      	bge.n	800458c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2210      	movs	r2, #16
 80045ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3301      	adds	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80045bc:	d901      	bls.n	80045c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e006      	b.n	80045d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d0f0      	beq.n	80045b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	68f9      	ldr	r1, [r7, #12]
 80045f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800460e:	b480      	push	{r7}
 8004610:	b085      	sub	sp, #20
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004628:	f023 0303 	bic.w	r3, r3, #3
 800462c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f003 0301 	and.w	r3, r3, #1
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3301      	adds	r3, #1
 800467c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004684:	d901      	bls.n	800468a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e01b      	b.n	80046c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	daf2      	bge.n	8004678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f043 0201 	orr.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3301      	adds	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80046ae:	d901      	bls.n	80046b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e006      	b.n	80046c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d0f0      	beq.n	80046a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <memset>:
 80046ce:	4402      	add	r2, r0
 80046d0:	4603      	mov	r3, r0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d100      	bne.n	80046d8 <memset+0xa>
 80046d6:	4770      	bx	lr
 80046d8:	f803 1b01 	strb.w	r1, [r3], #1
 80046dc:	e7f9      	b.n	80046d2 <memset+0x4>
	...

080046e0 <__libc_init_array>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	4d0d      	ldr	r5, [pc, #52]	; (8004718 <__libc_init_array+0x38>)
 80046e4:	4c0d      	ldr	r4, [pc, #52]	; (800471c <__libc_init_array+0x3c>)
 80046e6:	1b64      	subs	r4, r4, r5
 80046e8:	10a4      	asrs	r4, r4, #2
 80046ea:	2600      	movs	r6, #0
 80046ec:	42a6      	cmp	r6, r4
 80046ee:	d109      	bne.n	8004704 <__libc_init_array+0x24>
 80046f0:	4d0b      	ldr	r5, [pc, #44]	; (8004720 <__libc_init_array+0x40>)
 80046f2:	4c0c      	ldr	r4, [pc, #48]	; (8004724 <__libc_init_array+0x44>)
 80046f4:	f000 f818 	bl	8004728 <_init>
 80046f8:	1b64      	subs	r4, r4, r5
 80046fa:	10a4      	asrs	r4, r4, #2
 80046fc:	2600      	movs	r6, #0
 80046fe:	42a6      	cmp	r6, r4
 8004700:	d105      	bne.n	800470e <__libc_init_array+0x2e>
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	f855 3b04 	ldr.w	r3, [r5], #4
 8004708:	4798      	blx	r3
 800470a:	3601      	adds	r6, #1
 800470c:	e7ee      	b.n	80046ec <__libc_init_array+0xc>
 800470e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004712:	4798      	blx	r3
 8004714:	3601      	adds	r6, #1
 8004716:	e7f2      	b.n	80046fe <__libc_init_array+0x1e>
 8004718:	08004770 	.word	0x08004770
 800471c:	08004770 	.word	0x08004770
 8004720:	08004770 	.word	0x08004770
 8004724:	08004774 	.word	0x08004774

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
